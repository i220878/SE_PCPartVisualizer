"use client"

import { Document, Page, Text, View, StyleSheet, Font } from "@react-pdf/renderer"
import { checkCompatibility } from "@/lib/compatibility"
import type { Component } from "@/lib/types"

// Register fonts
Font.register({
  family: "Inter",
  fonts: [
    { src: "https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2" },
    { src: "https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuGKYAZ9hiA.woff2", fontWeight: 600 },
  ],
})

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: "column",
    backgroundColor: "#ffffff",
    padding: 30,
    fontFamily: "Inter",
  },
  header: {
    marginBottom: 20,
    borderBottom: 1,
    borderColor: "#e2e8f0",
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 600,
    color: "#1e293b",
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: "#64748b",
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 600,
    color: "#1e293b",
    marginBottom: 10,
  },
  componentList: {
    marginLeft: 10,
  },
  componentItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 5,
    fontSize: 12,
  },
  componentName: {
    color: "#1e293b",
  },
  componentPrice: {
    color: "#0f172a",
    fontWeight: 600,
  },
  total: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 10,
    paddingTop: 10,
    borderTop: 1,
    borderColor: "#e2e8f0",
    fontSize: 14,
    fontWeight: 600,
  },
  warning: {
    backgroundColor: "#fee2e2",
    padding: 10,
    borderRadius: 4,
    marginTop: 10,
    fontSize: 12,
    color: "#991b1b",
  },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 30,
    right: 30,
    fontSize: 10,
    color: "#64748b",
    textAlign: "center",
  },
})

interface BuildPDFProps {
  build: {
    name: string
    date: string
    components: Component[]
  }
}

export function BuildPDF({ build }: BuildPDFProps) {
  const compatibilityIssues = checkCompatibility(build.components)
  const totalPrice = build.components.reduce((sum, component) => sum + component.price, 0)

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>{build.name}</Text>
          <Text style={styles.subtitle}>
            Generated on {new Date(build.date).toLocaleDateString()}
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Components</Text>
          <View style={styles.componentList}>
            {build.components.map((component) => (
              <View key={component.id} style={styles.componentItem}>
                <Text style={styles.componentName}>
                  {component.brand} {component.name}
                </Text>
                <Text style={styles.componentPrice}>${component.price.toFixed(2)}</Text>
              </View>
            ))}
          </View>
          <View style={styles.total}>
            <Text>Total</Text>
            <Text>${totalPrice.toFixed(2)}</Text>
          </View>
        </View>

        {compatibilityIssues.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Compatibility Warnings</Text>
            {compatibilityIssues.map((issue, index) => (
              <Text key={index} style={styles.warning}>
                {issue}
              </Text>
            ))}
          </View>
        )}

        <Text style={styles.footer}>
          Generated by PC Part Visualizer â€¢ {new Date().toLocaleDateString()}
        </Text>
      </Page>
    </Document>
  )
} 