===== ./app/page.tsx =====
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Cpu, BookOpen, Users, HardDrive, ArrowRight } from "lucide-react"

export default function Home() {
  return (
    <div className="space-y-12">
      <section className="py-12 md:py-24 lg:py-32 xl:py-48">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col items-center space-y-4 text-center">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl/none">
                Build Your Dream PC with Confidence
              </h1>
              <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400">
                Design, visualize, and plan your PC build with our interactive 3D tool. Check compatibility, compare
                prices, and share your creations.
              </p>
            </div>
            <div className="space-x-4">
              <Link href="/build">
                <Button size="lg">
                  Start Building
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </Link>
              <Link href="/guides">
                <Button variant="outline" size="lg">
                  View Guides
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </section>

      <section className="py-12 md:py-24 lg:py-32">
        <div className="container px-4 md:px-6">
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader>
                <Cpu className="h-8 w-8 mb-2" />
                <CardTitle>PC Builder</CardTitle>
                <CardDescription>Search, select, and visualize components</CardDescription>
              </CardHeader>
              <CardContent>
                Build your PC with our interactive tool. Check compatibility, compare prices, and see your build in 3D.
              </CardContent>
              <CardFooter>
                <Link href="/build">
                  <Button variant="outline">Start Building</Button>
                </Link>
              </CardFooter>
            </Card>
            <Card>
              <CardHeader>
                <BookOpen className="h-8 w-8 mb-2" />
                <CardTitle>Build Guides</CardTitle>
                <CardDescription>Step-by-step assembly instructions</CardDescription>
              </CardHeader>
              <CardContent>
                Follow our detailed guides to assemble your PC. Learn tips and tricks from experts.
              </CardContent>
              <CardFooter>
                <Link href="/guides">
                  <Button variant="outline">View Guides</Button>
                </Link>
              </CardFooter>
            </Card>
            <Card>
              <CardHeader>
                <Users className="h-8 w-8 mb-2" />
                <CardTitle>Community Builds</CardTitle>
                <CardDescription>Explore builds from other users</CardDescription>
              </CardHeader>
              <CardContent>
                Get inspired by builds from the community. Share your own builds and get feedback.
              </CardContent>
              <CardFooter>
                <Link href="/community">
                  <Button variant="outline">Explore Builds</Button>
                </Link>
              </CardFooter>
            </Card>
            <Card>
              <CardHeader>
                <HardDrive className="h-8 w-8 mb-2" />
                <CardTitle>Parts Database</CardTitle>
                <CardDescription>Comprehensive component information</CardDescription>
              </CardHeader>
              <CardContent>
                Browse our extensive database of PC components. Read reviews and compare specifications.
              </CardContent>
              <CardFooter>
                <Link href="/parts">
                  <Button variant="outline">Browse Parts</Button>
                </Link>
              </CardFooter>
            </Card>
          </div>
        </div>
      </section>

      <section className="py-12 md:py-24 lg:py-32 bg-muted">
        <div className="container px-4 md:px-6">
          <div className="flex flex-col items-center justify-center space-y-4 text-center">
            <div className="space-y-2">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Ready to Build Your PC?</h2>
              <p className="mx-auto max-w-[700px] text-gray-500 md:text-xl dark:text-gray-400">
                Start building your dream PC today with our interactive tool.
              </p>
            </div>
            <Link href="/build">
              <Button size="lg">
                Start Building Now
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </Link>
          </div>
        </div>
      </section>
    </div>
  )
}


===== ./app/layout.tsx =====
import type React from "react"
import "@/app/globals.css"
import { Inter } from "next/font/google"
import { ThemeProvider } from "@/components/theme-provider"
import { Navbar } from "@/components/navbar"

const inter = Inter({ subsets: ["latin"] })

export const metadata = {
  title: "PC Part Visualizer",
  description: "Build and visualize your PC in 3D",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          <Navbar />
          <main className="container py-6">{children}</main>
        </ThemeProvider>
      </body>
    </html>
  )
}


===== ./app/loading.tsx =====
export default function Loading() {
  return null
}


===== ./app/community/page.tsx =====
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Search, Plus, ThumbsUp, MessageSquare, Eye, ArrowRight } from "lucide-react"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

// Mock data for community builds
const communityBuilds = [
  {
    id: 1,
    title: "My First Gaming PC",
    description: "Built this for playing Cyberpunk 2077 and other AAA titles",
    author: {
      name: "GamerX",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-10-15",
    category: "Gaming",
    specs: {
      cpu: "Ryzen 7 5800X",
      gpu: "RTX 3080",
      ram: "32GB DDR4 3600MHz",
      storage: "1TB NVMe SSD",
      case: "Corsair 4000D Airflow",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 24,
    likes: 87,
    views: 1245,
  },
  {
    id: 2,
    title: "Compact Productivity Machine",
    description: "Small form factor PC for my home office setup",
    author: {
      name: "OfficePro",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-09-22",
    category: "Productivity",
    specs: {
      cpu: "Intel i5-12600K",
      gpu: "Intel UHD Graphics",
      ram: "16GB DDR4 3200MHz",
      storage: "512GB NVMe SSD",
      case: "NZXT H1",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 12,
    likes: 45,
    views: 782,
  },
  {
    id: 3,
    title: "Ultimate Streaming Setup",
    description: "Dual PC setup for streaming and gaming",
    author: {
      name: "StreamerPro",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-08-10",
    category: "Streaming",
    specs: {
      cpu: "Ryzen 9 5950X",
      gpu: "RTX 3090",
      ram: "64GB DDR4 3600MHz",
      storage: "2TB NVMe SSD + 4TB HDD",
      case: "Lian Li O11 Dynamic",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 36,
    likes: 124,
    views: 2145,
  },
  {
    id: 4,
    title: "Budget Workstation",
    description: "Affordable PC for video editing and 3D modeling",
    author: {
      name: "CreatorOnBudget",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-07-05",
    category: "Workstation",
    specs: {
      cpu: "Ryzen 5 5600X",
      gpu: "RTX 3060",
      ram: "32GB DDR4 3200MHz",
      storage: "1TB NVMe SSD",
      case: "Fractal Design Meshify C",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 18,
    likes: 56,
    views: 932,
  },
  {
    id: 5,
    title: "RGB Showcase",
    description: "Maximum RGB build with synchronized lighting",
    author: {
      name: "RGBLover",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-06-12",
    category: "Gaming",
    specs: {
      cpu: "Intel i9-12900K",
      gpu: "RTX 3080 Ti",
      ram: "32GB DDR5 5600MHz",
      storage: "2TB NVMe SSD",
      case: "Corsair iCUE 5000X RGB",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 42,
    likes: 138,
    views: 2567,
  },
  {
    id: 6,
    title: "Silent Home Theater PC",
    description: "Ultra-quiet HTPC for my living room",
    author: {
      name: "MovieBuff",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    date: "2023-05-01",
    category: "HTPC",
    specs: {
      cpu: "Intel i5-12400",
      gpu: "RTX 3050",
      ram: "16GB DDR4 3200MHz",
      storage: "1TB NVMe SSD + 4TB HDD",
      case: "Fractal Design Node 202",
    },
    images: ["/placeholder.svg?height=200&width=300"],
    comments: 15,
    likes: 42,
    views: 876,
  },
]

export default function CommunityPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [activeTab, setActiveTab] = useState("all")

  const filteredBuilds = communityBuilds.filter((build) => {
    const matchesSearch =
      build.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      build.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      build.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      Object.values(build.specs).some((spec) => spec.toLowerCase().includes(searchTerm.toLowerCase()))

    const matchesCategory = activeTab === "all" || build.category.toLowerCase() === activeTab.toLowerCase()

    return matchesSearch && matchesCategory
  })

  return (
    <main className="container mx-auto p-4 py-8">
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">Community Builds</h1>
          <p className="text-muted-foreground">Discover builds shared by other enthusiasts</p>
        </div>
        <Button className="mt-4 md:mt-0" asChild>
          <a href="/community/submit">
            <Plus className="mr-2 h-4 w-4" /> Submit Build
          </a>
        </Button>
      </div>

      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search builds by title, description, category, or components..."
            className="pl-8"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab} className="mb-6">
        <TabsList className="grid grid-cols-2 md:grid-cols-7">
          <TabsTrigger value="all">All</TabsTrigger>
          <TabsTrigger value="gaming">Gaming</TabsTrigger>
          <TabsTrigger value="workstation">Workstation</TabsTrigger>
          <TabsTrigger value="streaming">Streaming</TabsTrigger>
          <TabsTrigger value="productivity">Productivity</TabsTrigger>
          <TabsTrigger value="htpc">HTPC</TabsTrigger>
          <TabsTrigger value="budget">Budget</TabsTrigger>
        </TabsList>
      </Tabs>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredBuilds.map((build) => (
          <Card key={build.id} className="overflow-hidden">
            <div className="aspect-video bg-muted">
              <img
                src={build.images[0] || "/placeholder.svg"}
                alt={build.title}
                className="w-full h-full object-cover"
              />
            </div>
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <CardTitle className="text-xl">{build.title}</CardTitle>
                <Badge>{build.category}</Badge>
              </div>
              <CardDescription>{build.description}</CardDescription>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">CPU:</span>
                  <span>{build.specs.cpu}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">GPU:</span>
                  <span>{build.specs.gpu}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">RAM:</span>
                  <span>{build.specs.ram}</span>
                </div>
              </div>
              <div className="flex items-center mt-4">
                <Avatar className="h-8 w-8 mr-2">
                  <AvatarImage src={build.author.avatar || "/placeholder.svg"} alt={build.author.name} />
                  <AvatarFallback>{build.author.name.charAt(0)}</AvatarFallback>
                </Avatar>
                <div className="text-sm">
                  <div>{build.author.name}</div>
                  <div className="text-muted-foreground">{build.date}</div>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <div className="flex space-x-4 text-sm text-muted-foreground">
                <div className="flex items-center">
                  <Eye className="mr-1 h-4 w-4" />
                  {build.views}
                </div>
                <div className="flex items-center">
                  <ThumbsUp className="mr-1 h-4 w-4" />
                  {build.likes}
                </div>
                <div className="flex items-center">
                  <MessageSquare className="mr-1 h-4 w-4" />
                  {build.comments}
                </div>
              </div>
              <Button variant="ghost" size="sm" asChild>
                <a href={`/community/builds/${build.id}`}>
                  View <ArrowRight className="ml-1 h-4 w-4" />
                </a>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </main>
  )
}


===== ./app/community/loading.tsx =====
export default function Loading() {
  return null
}


===== ./app/help/page.tsx =====
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { BookOpen, HelpCircle, Info, Mail } from "lucide-react"

export default function HelpPage() {
  return (
    <main className="container mx-auto p-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Help & Resources</h1>

      <Tabs defaultValue="faq" className="mb-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="faq">
            <HelpCircle className="h-4 w-4 mr-2" />
            FAQ
          </TabsTrigger>
          <TabsTrigger value="guides">
            <BookOpen className="h-4 w-4 mr-2" />
            Guides
          </TabsTrigger>
          <TabsTrigger value="about">
            <Info className="h-4 w-4 mr-2" />
            About
          </TabsTrigger>
          <TabsTrigger value="contact">
            <Mail className="h-4 w-4 mr-2" />
            Contact
          </TabsTrigger>
        </TabsList>

        <TabsContent value="faq" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Frequently Asked Questions</CardTitle>
              <CardDescription>Find answers to common questions about PC building and our platform</CardDescription>
            </CardHeader>
            <CardContent>
              <Accordion type="single" collapsible className="w-full">
                <AccordionItem value="item-1">
                  <AccordionTrigger>How accurate is the compatibility checker?</AccordionTrigger>
                  <AccordionContent>
                    Our compatibility checker uses a comprehensive database of component specifications to verify
                    compatibility. It checks for socket compatibility between CPUs and motherboards, RAM compatibility,
                    power requirements, physical dimensions, and more. While we strive for accuracy, we recommend
                    double-checking critical compatibility factors before making a purchase.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem value="item-2">
                  <AccordionTrigger>How do I save my PC build?</AccordionTrigger>
                  <AccordionContent>
                    Once you've added components to your build, click the "Save Build" button in the build list panel.
                    Your build will be saved locally in your browser's storage. You can access your saved builds from
                    the "Saved Builds" section. For more permanent storage, you can export your build as a PDF or
                    generate a shareable link.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem value="item-3">
                  <AccordionTrigger>Are the prices up-to-date?</AccordionTrigger>
                  <AccordionContent>
                    We strive to provide the most current pricing information available. Prices are updated regularly
                    from various retailers. However, prices can fluctuate frequently, so we recommend checking the
                    retailer's website for the most current pricing before making a purchase decision.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem value="item-4">
                  <AccordionTrigger>How do I share my build with others?</AccordionTrigger>
                  <AccordionContent>
                    You can share your build by clicking the "Share" button in the build list panel. This will generate
                    a unique URL that you can copy and share with others. Anyone with this link can view your build
                    configuration. You can also export your build as a PDF or submit it to the community section.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem value="item-5">
                  <AccordionTrigger>How can I contribute to the community?</AccordionTrigger>
                  <AccordionContent>
                    You can contribute by submitting your completed builds to the community section, creating build
                    guides, writing reviews for components you've used, and participating in discussions on other users'
                    builds. Your contributions help other builders make informed decisions.
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="guides" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Beginner's Guides</CardTitle>
              <CardDescription>Helpful resources for those new to PC building</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">PC Building Basics</h3>
                  <p className="text-muted-foreground mb-2">
                    Learn the fundamentals of PC building, including component selection, assembly, and troubleshooting.
                  </p>
                  <a href="/guides/basics" className="text-primary hover:underline">
                    Read guide →
                  </a>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">Understanding PC Components</h3>
                  <p className="text-muted-foreground mb-2">
                    A comprehensive overview of each PC component, their functions, and what to look for when selecting
                    them.
                  </p>
                  <a href="/guides/components" className="text-primary hover:underline">
                    Read guide →
                  </a>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">First-Time Builder's Checklist</h3>
                  <p className="text-muted-foreground mb-2">
                    A step-by-step checklist to ensure you have everything you need for a successful first build.
                  </p>
                  <a href="/guides/checklist" className="text-primary hover:underline">
                    Read guide →
                  </a>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">Troubleshooting Common Issues</h3>
                  <p className="text-muted-foreground mb-2">
                    Solutions to common problems encountered during and after the PC building process.
                  </p>
                  <a href="/guides/troubleshooting" className="text-primary hover:underline">
                    Read guide →
                  </a>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="about" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>About PC Part Visualizer</CardTitle>
              <CardDescription>Learn more about our platform and mission</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-medium mb-2">Our Mission</h3>
                  <p className="text-muted-foreground">
                    PC Part Visualizer was created to simplify the PC building process for enthusiasts of all experience
                    levels. Our mission is to provide a comprehensive, user-friendly platform that helps users select
                    compatible components, visualize their builds, and share their creations with a community of
                    like-minded individuals.
                  </p>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-2">Features</h3>
                  <ul className="list-disc pl-5 text-muted-foreground space-y-1">
                    <li>Interactive component selection with compatibility checking</li>
                    <li>3D visualization of PC builds</li>
                    <li>Price comparison across multiple retailers</li>
                    <li>Build saving and sharing capabilities</li>
                    <li>Community section for sharing completed builds</li>
                    <li>Comprehensive build guides and resources</li>
                    <li>Detailed component database with specifications and reviews</li>
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-2">Technology</h3>
                  <p className="text-muted-foreground">
                    PC Part Visualizer is built using modern web technologies including React, Next.js, Three.js for 3D
                    visualization, and a comprehensive component database. Our platform is designed to be fast,
                    responsive, and accessible on all devices.
                  </p>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-2">Credits</h3>
                  <p className="text-muted-foreground">
                    PC Part Visualizer was developed as a project for the Software Engineering course. Special thanks to
                    all contributors who helped make this platform possible.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="contact" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Contact Us</CardTitle>
              <CardDescription>Get in touch with our team</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">Support</h3>
                  <p className="text-muted-foreground mb-2">
                    For general support inquiries, feature requests, or bug reports.
                  </p>
                  <a href="mailto:support@pcpartvisualizer.com" className="text-primary hover:underline">
                    support@pcpartvisualizer.com
                  </a>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">Partnerships</h3>
                  <p className="text-muted-foreground mb-2">
                    For business inquiries, partnerships, or collaboration opportunities.
                  </p>
                  <a href="mailto:partners@pcpartvisualizer.com" className="text-primary hover:underline">
                    partners@pcpartvisualizer.com
                  </a>
                </div>

                <div className="border rounded-lg p-4">
                  <h3 className="text-lg font-medium mb-2">Feedback</h3>
                  <p className="text-muted-foreground mb-2">
                    We value your feedback! Let us know how we can improve our platform.
                  </p>
                  <a href="mailto:feedback@pcpartvisualizer.com" className="text-primary hover:underline">
                    feedback@pcpartvisualizer.com
                  </a>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </main>
  )
}


===== ./app/parts/page.tsx =====
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Search, Star, StarHalf, Plus } from "lucide-react"
import { mockComponents } from "@/lib/mock-data"
import type { ComponentCategory } from "@/lib/types"

export default function PartsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<ComponentCategory | "all">("all")

  const filteredComponents = mockComponents.filter((component) => {
    const matchesCategory = selectedCategory === "all" || component.category === selectedCategory
    const matchesSearch =
      searchTerm === "" ||
      component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      component.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
      component.specs.some(
        (spec) =>
          spec.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          spec.value.toLowerCase().includes(searchTerm.toLowerCase()),
      )

    return matchesCategory && matchesSearch
  })

  // Group components by category for counting
  const categoryCounts = mockComponents.reduce(
    (acc, component) => {
      acc[component.category] = (acc[component.category] || 0) + 1
      return acc
    },
    {} as Record<string, number>,
  )

  return (
    <main className="container mx-auto p-4 py-8">
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">Parts Database</h1>
          <p className="text-muted-foreground">Browse our comprehensive database of PC components</p>
        </div>
      </div>

      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search parts by name, brand, or specifications..."
            className="pl-8"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <Tabs
        defaultValue="all"
        value={selectedCategory}
        onValueChange={(value) => setSelectedCategory(value as ComponentCategory | "all")}
        className="mb-6"
      >
        <TabsList className="grid grid-cols-2 md:grid-cols-8">
          <TabsTrigger value="all">All ({mockComponents.length})</TabsTrigger>
          <TabsTrigger value="cpu">CPU ({categoryCounts["cpu"] || 0})</TabsTrigger>
          <TabsTrigger value="motherboard">Motherboard ({categoryCounts["motherboard"] || 0})</TabsTrigger>
          <TabsTrigger value="ram">RAM ({categoryCounts["ram"] || 0})</TabsTrigger>
          <TabsTrigger value="gpu">GPU ({categoryCounts["gpu"] || 0})</TabsTrigger>
          <TabsTrigger value="storage">Storage ({categoryCounts["storage"] || 0})</TabsTrigger>
          <TabsTrigger value="psu">PSU ({categoryCounts["psu"] || 0})</TabsTrigger>
          <TabsTrigger value="case">Case ({categoryCounts["case"] || 0})</TabsTrigger>
        </TabsList>
      </Tabs>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredComponents.map((component) => (
          <Card key={component.id} className="overflow-hidden">
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <CardTitle>{component.name}</CardTitle>
                <Badge>{component.category}</Badge>
              </div>
              <CardDescription>{component.brand}</CardDescription>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="space-y-1 text-sm">
                {component.specs.slice(0, 4).map((spec, index) => (
                  <div key={index} className="flex justify-between">
                    <span className="text-muted-foreground">{spec.name}:</span>
                    <span>{spec.value}</span>
                  </div>
                ))}
                {component.specs.length > 4 && (
                  <div className="text-center text-muted-foreground text-xs mt-2">
                    +{component.specs.length - 4} more specifications
                  </div>
                )}
              </div>
              <div className="mt-4 flex items-center">
                <div className="flex text-amber-500">
                  <Star className="h-4 w-4 fill-current" />
                  <Star className="h-4 w-4 fill-current" />
                  <Star className="h-4 w-4 fill-current" />
                  <Star className="h-4 w-4 fill-current" />
                  <StarHalf className="h-4 w-4 fill-current" />
                </div>
                <span className="text-sm ml-2">4.5 (128 reviews)</span>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <div className="font-medium">${component.price.toFixed(2)}</div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" asChild>
                  <a href={`/parts/${component.id}`}>Details</a>
                </Button>
                <Button size="sm">
                  <Plus className="mr-1 h-4 w-4" /> Add to Build
                </Button>
              </div>
            </CardFooter>
          </Card>
        ))}
      </div>
    </main>
  )
}


===== ./app/parts/[id]/page.tsx =====
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Star, StarHalf, Plus, ThumbsUp, ThumbsDown, ExternalLink } from "lucide-react"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Separator } from "@/components/ui/separator"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { useRouter } from "next/navigation"
import { mockComponents } from "@/lib/mock-data"
import { getPriceComparisons } from "@/lib/price-comparison"

// Mock reviews data
const reviews = [
  {
    id: 1,
    author: {
      name: "TechEnthusiast",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    rating: 5,
    date: "2023-08-15",
    title: "Excellent performance for the price",
    content:
      "I've been using this CPU for gaming and productivity tasks, and it handles everything I throw at it with ease. The multi-core performance is particularly impressive for the price point.",
    helpful: 24,
    unhelpful: 2,
  },
  {
    id: 2,
    author: {
      name: "GamersChoice",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    rating: 4,
    date: "2023-07-22",
    title: "Great for gaming, runs a bit hot",
    content:
      "This CPU performs excellently in games, with high framerates in all the titles I play. My only complaint is that it runs a bit hot under load, so make sure you have good cooling.",
    helpful: 18,
    unhelpful: 3,
  },
  {
    id: 3,
    author: {
      name: "BuilderPro",
      avatar: "/placeholder.svg?height=40&width=40",
    },
    rating: 5,
    date: "2023-06-10",
    title: "Perfect for mid-range builds",
    content:
      "This is my go-to CPU for mid-range builds. Great performance, reasonable power consumption, and the included cooler is actually decent. Highly recommended!",
    helpful: 32,
    unhelpful: 1,
  },
]

export default function PartPage({ params }: { params: { id: string } }) {
  const router = useRouter()
  const [activeTab, setActiveTab] = useState("specs")

  // Find the component by ID
  const component = mockComponents.find((c) => c.id === params.id) || mockComponents[0]
  const priceComparisons = getPriceComparisons(component.id)

  // Calculate average rating
  const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length

  // Calculate rating distribution
  const ratingDistribution = [0, 0, 0, 0, 0]
  reviews.forEach((review) => {
    ratingDistribution[review.rating - 1]++
  })
  const maxRatingCount = Math.max(...ratingDistribution)

  return (
    <main className="container mx-auto p-4 py-8">
      <Button variant="ghost" size="sm" className="mb-6" onClick={() => router.back()}>
        <ArrowLeft className="h-4 w-4 mr-2" />
        Back to Parts
      </Button>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div className="flex flex-col md:flex-row gap-6">
            <div className="w-full md:w-1/3 aspect-square bg-muted rounded-lg flex items-center justify-center">
              <div className="text-4xl font-bold text-muted-foreground">{component.category.toUpperCase()}</div>
            </div>

            <div className="w-full md:w-2/3">
              <h1 className="text-3xl font-bold mb-2">{component.name}</h1>
              <div className="flex items-center gap-2 mb-4">
                <Badge variant="outline">{component.brand}</Badge>
                <Badge>{component.category}</Badge>
              </div>

              <div className="flex items-center mb-4">
                <div className="flex text-amber-500">
                  {[...Array(Math.floor(averageRating))].map((_, i) => (
                    <Star key={i} className="h-5 w-5 fill-current" />
                  ))}
                  {averageRating % 1 >= 0.5 && <StarHalf className="h-5 w-5 fill-current" />}
                </div>
                <span className="ml-2 font-medium">{averageRating.toFixed(1)}</span>
                <span className="ml-1 text-muted-foreground">({reviews.length} reviews)</span>
              </div>

              <div className="space-y-2 mb-6">
                <div className="flex justify-between font-medium">
                  <span>Price:</span>
                  <span>${component.price.toFixed(2)}</span>
                </div>

                <div className="text-sm text-muted-foreground">
                  Prices from {priceComparisons.length} retailers, starting at $
                  {Math.min(...priceComparisons.map((p) => p.price)).toFixed(2)}
                </div>
              </div>

              <div className="flex gap-2">
                <Button className="flex-1">
                  <Plus className="h-4 w-4 mr-2" />
                  Add to Build
                </Button>
                <Button variant="outline" className="flex-1">
                  Compare
                </Button>
              </div>
            </div>
          </div>

          <Tabs defaultValue="specs" value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="specs">Specifications</TabsTrigger>
              <TabsTrigger value="prices">Price Comparison</TabsTrigger>
              <TabsTrigger value="reviews">Reviews</TabsTrigger>
            </TabsList>

            <TabsContent value="specs" className="space-y-4 pt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Technical Specifications</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {component.specs.map((spec, index) => (
                      <div key={index} className="flex justify-between py-2 border-b last:border-0">
                        <span className="font-medium">{spec.name}</span>
                        <span>{spec.value}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Compatibility</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {component.category === "cpu" && (
                      <>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">Socket</span>
                          <span>{component.specs.find((s) => s.name === "Socket")?.value || "AM4/LGA1700"}</span>
                        </div>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">Compatible Chipsets</span>
                          <span>{component.brand === "AMD" ? "X570, B550, A520" : "Z690, B660, H610"}</span>
                        </div>
                        <div className="flex justify-between py-2">
                          <span className="font-medium">Memory Support</span>
                          <span>{component.brand === "AMD" ? "DDR4-3200" : "DDR4-3200/DDR5-4800"}</span>
                        </div>
                      </>
                    )}

                    {component.category === "motherboard" && (
                      <>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">CPU Support</span>
                          <span>
                            {component.specs.find((s) => s.name === "Socket")?.value === "AM4"
                              ? "AMD Ryzen 3000/5000 Series"
                              : "Intel 12th/13th Gen"}
                          </span>
                        </div>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">Memory Type</span>
                          <span>{component.specs.find((s) => s.name === "Memory Type")?.value || "DDR4"}</span>
                        </div>
                        <div className="flex justify-between py-2">
                          <span className="font-medium">Form Factor</span>
                          <span>{component.specs.find((s) => s.name === "Form Factor")?.value || "ATX"}</span>
                        </div>
                      </>
                    )}

                    {component.category === "gpu" && (
                      <>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">Required PCIe Slot</span>
                          <span>PCIe 4.0 x16</span>
                        </div>
                        <div className="flex justify-between py-2 border-b">
                          <span className="font-medium">Power Connectors</span>
                          <span>{component.specs.find((s) => s.name === "Power Connectors")?.value || "8-pin"}</span>
                        </div>
                        <div className="flex justify-between py-2">
                          <span className="font-medium">Recommended PSU</span>
                          <span>
                            {Number.parseInt(component.specs.find((s) => s.name === "TDP")?.value || "0") * 2}W
                          </span>
                        </div>
                      </>
                    )}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="prices" className="space-y-4 pt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Price Comparison</CardTitle>
                  <CardDescription>Compare prices across different retailers</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {priceComparisons.map((price, index) => (
                      <div key={index} className="flex justify-between items-center py-2 border-b last:border-0">
                        <div>
                          <div className="font-medium">{price.retailer}</div>
                          <div className="text-sm text-muted-foreground">Free shipping • In stock</div>
                        </div>
                        <div className="flex items-center gap-4">
                          <span className="font-bold">${price.price.toFixed(2)}</span>
                          <Button variant="outline" size="sm" asChild>
                            <a href={price.url} target="_blank" rel="noopener noreferrer">
                              <ExternalLink className="h-4 w-4 mr-2" />
                              Visit
                            </a>
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Price History</CardTitle>
                  <CardDescription>Price trends over the last 6 months</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="aspect-video bg-muted rounded-lg flex items-center justify-center">
                    <div className="text-muted-foreground">Price history chart</div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="reviews" className="space-y-4 pt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Customer Reviews</CardTitle>
                  <CardDescription>
                    {reviews.length} reviews for {component.name}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-col md:flex-row gap-6 mb-6">
                    <div className="w-full md:w-1/3 space-y-2">
                      <div className="text-center">
                        <div className="text-5xl font-bold">{averageRating.toFixed(1)}</div>
                        <div className="flex justify-center text-amber-500 my-2">
                          {[...Array(Math.floor(averageRating))].map((_, i) => (
                            <Star key={i} className="h-5 w-5 fill-current" />
                          ))}
                          {averageRating % 1 >= 0.5 && <StarHalf className="h-5 w-5 fill-current" />}
                        </div>
                        <div className="text-sm text-muted-foreground">Based on {reviews.length} reviews</div>
                      </div>
                    </div>

                    <div className="w-full md:w-2/3 space-y-2">
                      {[5, 4, 3, 2, 1].map((rating) => (
                        <div key={rating} className="flex items-center gap-2">
                          <div className="w-8 text-sm text-right">{rating} ★</div>
                          <Progress
                            value={(ratingDistribution[rating - 1] / maxRatingCount) * 100}
                            className="h-2 flex-1"
                          />
                          <div className="w-8 text-sm">{ratingDistribution[rating - 1]}</div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator className="my-6" />

                  <div className="space-y-6">
                    {reviews.map((review) => (
                      <div key={review.id} className="space-y-2">
                        <div className="flex justify-between">
                          <div className="flex items-center">
                            <Avatar className="h-8 w-8 mr-2">
                              <AvatarImage src={review.author.avatar || "/placeholder.svg"} alt={review.author.name} />
                              <AvatarFallback>{review.author.name.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div>
                              <div className="font-medium">{review.author.name}</div>
                              <div className="text-xs text-muted-foreground">{review.date}</div>
                            </div>
                          </div>
                          <div className="flex text-amber-500">
                            {[...Array(review.rating)].map((_, i) => (
                              <Star key={i} className="h-4 w-4 fill-current" />
                            ))}
                          </div>
                        </div>

                        <div>
                          <h4 className="font-medium">{review.title}</h4>
                          <p className="text-sm text-muted-foreground mt-1">{review.content}</p>
                        </div>

                        <div className="flex items-center gap-4 text-sm">
                          <span>Was this review helpful?</span>
                          <Button variant="outline" size="sm" className="h-8">
                            <ThumbsUp className="h-3 w-3 mr-1" />
                            Yes ({review.helpful})
                          </Button>
                          <Button variant="outline" size="sm" className="h-8">
                            <ThumbsDown className="h-3 w-3 mr-1" />
                            No ({review.unhelpful})
                          </Button>
                        </div>

                        <Separator className="mt-4" />
                      </div>
                    ))}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" className="w-full">
                    Write a Review
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Similar Components</CardTitle>
              <CardDescription>Other {component.category}s you might consider</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {mockComponents
                  .filter((c) => c.category === component.category && c.id !== component.id)
                  .slice(0, 3)
                  .map((similarComponent) => (
                    <div
                      key={similarComponent.id}
                      className="flex justify-between items-center py-2 border-b last:border-0"
                    >
                      <div>
                        <div className="font-medium">{similarComponent.name}</div>
                        <div className="text-sm text-muted-foreground">{similarComponent.brand}</div>
                      </div>
                      <div className="flex items-center gap-4">
                        <span className="font-medium">${similarComponent.price.toFixed(2)}</span>
                        <Button variant="outline" size="sm" asChild>
                          <a href={`/parts/${similarComponent.id}`}>Compare</a>
                        </Button>
                      </div>
                    </div>
                  ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Shipping Information</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-start gap-4 pb-4 border-b">
                  <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-primary">
                    1
                  </div>
                  <div>
                    <div className="font-medium">Amazon</div>
                    <div className="text-sm text-muted-foreground">
                      Free shipping • Estimated delivery: 2-3 business days
                    </div>
                  </div>
                </div>

                <div className="flex items-start gap-4 pb-4 border-b">
                  <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-primary">
                    2
                  </div>
                  <div>
                    <div className="font-medium">Newegg</div>
                    <div className="text-sm text-muted-foreground">
                      $4.99 shipping • Estimated delivery: 3-5 business days
                    </div>
                  </div>
                </div>

                <div className="flex items-start gap-4">
                  <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-primary">
                    3
                  </div>
                  <div>
                    <div className="font-medium">Best Buy</div>
                    <div className="text-sm text-muted-foreground">
                      Free shipping on orders over $35 • Estimated delivery: 1-2 business days
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </main>
  )
}


===== ./app/parts/loading.tsx =====
export default function Loading() {
  return null
}


===== ./app/guides/create/page.tsx =====
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { useBuildStore } from "@/lib/store"
import { useToast } from "@/hooks/use-toast"
import { useRouter } from "next/navigation"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowLeft, Plus, Save, Trash2 } from "lucide-react"

export default function CreateGuidePage() {
  const { currentBuild } = useBuildStore()
  const { toast } = useToast()
  const router = useRouter()

  const [title, setTitle] = useState("")
  const [description, setDescription] = useState("")
  const [category, setCategory] = useState("gaming")
  const [difficulty, setDifficulty] = useState("beginner")
  const [budget, setBudget] = useState("")
  const [steps, setSteps] = useState([
    {
      title: "Prepare your workspace",
      content:
        "Clear a large, well-lit space for assembly. Gather all necessary tools: screwdrivers, zip ties, and anti-static equipment.",
    },
    {
      title: "Install CPU in motherboard",
      content:
        "Carefully align the CPU with the socket, matching the alignment markers. Gently lower the CPU into place without applying pressure. Secure the retention mechanism.",
    },
    {
      title: "Install RAM",
      content:
        "Align the notches on the RAM with the slots on the motherboard. Apply even pressure until the retention clips snap into place.",
    },
  ])

  const addStep = () => {
    setSteps([...steps, { title: "", content: "" }])
  }

  const updateStep = (index: number, field: "title" | "content", value: string) => {
    const newSteps = [...steps]
    newSteps[index][field] = value
    setSteps(newSteps)
  }

  const removeStep = (index: number) => {
    setSteps(steps.filter((_, i) => i !== index))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!title || !description || steps.some((step) => !step.title || !step.content)) {
      toast({
        title: "Missing information",
        description: "Please fill in all required fields",
        variant: "destructive",
      })
      return
    }

    // In a real app, this would save to a database
    toast({
      title: "Guide Created",
      description: "Your build guide has been created successfully",
    })

    router.push("/guides")
  }

  return (
    <main className="container mx-auto p-4 py-8">
      <div className="flex items-center mb-6">
        <Button variant="ghost" size="sm" className="mr-4" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </Button>
        <div>
          <h1 className="text-3xl font-bold">Create Build Guide</h1>
          <p className="text-muted-foreground">Share your knowledge with the community</p>
        </div>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Guide Information</CardTitle>
                <CardDescription>Basic information about your build guide</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    placeholder="e.g., Budget Gaming PC Build Guide"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    placeholder="Provide a brief overview of your build guide"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    required
                    className="min-h-[100px]"
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="category">Category</Label>
                    <Select value={category} onValueChange={setCategory}>
                      <SelectTrigger id="category">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="gaming">Gaming</SelectItem>
                        <SelectItem value="workstation">Workstation</SelectItem>
                        <SelectItem value="streaming">Streaming</SelectItem>
                        <SelectItem value="budget">Budget</SelectItem>
                        <SelectItem value="sff">Small Form Factor</SelectItem>
                        <SelectItem value="silent">Silent</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="difficulty">Difficulty</Label>
                    <Select value={difficulty} onValueChange={setDifficulty}>
                      <SelectTrigger id="difficulty">
                        <SelectValue placeholder="Select difficulty" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="beginner">Beginner</SelectItem>
                        <SelectItem value="intermediate">Intermediate</SelectItem>
                        <SelectItem value="advanced">Advanced</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="budget">Budget Range</Label>
                    <Input
                      id="budget"
                      placeholder="e.g., $800-$1000"
                      value={budget}
                      onChange={(e) => setBudget(e.target.value)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Build Steps</CardTitle>
                <CardDescription>Step-by-step instructions for your build guide</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {steps.map((step, index) => (
                  <div key={index} className="border rounded-lg p-4 space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="font-medium">Step {index + 1}</h3>
                      <Button variant="ghost" size="icon" type="button" onClick={() => removeStep(index)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor={`step-title-${index}`}>Title</Label>
                      <Input
                        id={`step-title-${index}`}
                        placeholder="e.g., Install CPU"
                        value={step.title}
                        onChange={(e) => updateStep(index, "title", e.target.value)}
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor={`step-content-${index}`}>Instructions</Label>
                      <Textarea
                        id={`step-content-${index}`}
                        placeholder="Detailed instructions for this step"
                        value={step.content}
                        onChange={(e) => updateStep(index, "content", e.target.value)}
                        required
                        className="min-h-[100px]"
                      />
                    </div>
                  </div>
                ))}

                <Button type="button" variant="outline" className="w-full" onClick={addStep}>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Step
                </Button>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Components</CardTitle>
                <CardDescription>Components used in this build</CardDescription>
              </CardHeader>
              <CardContent>
                {currentBuild.components.length > 0 ? (
                  <div className="space-y-2">
                    {currentBuild.components.map((component) => (
                      <div key={component.id} className="flex justify-between text-sm border-b pb-2">
                        <span className="text-muted-foreground">{component.category}:</span>
                        <span>{component.name}</span>
                      </div>
                    ))}
                    <div className="flex justify-between font-medium pt-2">
                      <span>Total:</span>
                      <span>${currentBuild.components.reduce((sum, c) => sum + c.price, 0).toFixed(2)}</span>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-4 text-muted-foreground">
                    No components selected. Add components in the Build page.
                  </div>
                )}
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full" asChild>
                  <a href="/build">Edit Components</a>
                </Button>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Preview</CardTitle>
                <CardDescription>Preview your guide</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="info">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="info">Info</TabsTrigger>
                    <TabsTrigger value="steps">Steps</TabsTrigger>
                  </TabsList>
                  <TabsContent value="info" className="pt-4">
                    <div className="space-y-2">
                      <h3 className="font-medium text-lg">{title || "Guide Title"}</h3>
                      <p className="text-muted-foreground">{description || "Guide description will appear here"}</p>
                      <div className="flex flex-wrap gap-2 mt-2">
                        {category && (
                          <div className="text-xs bg-secondary text-secondary-foreground px-2 py-1 rounded-full">
                            {category}
                          </div>
                        )}
                        {difficulty && (
                          <div className="text-xs bg-secondary text-secondary-foreground px-2 py-1 rounded-full">
                            {difficulty}
                          </div>
                        )}
                        {budget && (
                          <div className="text-xs bg-secondary text-secondary-foreground px-2 py-1 rounded-full">
                            {budget}
                          </div>
                        )}
                      </div>
                    </div>
                  </TabsContent>
                  <TabsContent value="steps" className="pt-4">
                    <div className="space-y-4">
                      {steps.length > 0 ? (
                        steps.map((step, index) => (
                          <div key={index} className="space-y-1">
                            <h4 className="font-medium">
                              Step {index + 1}: {step.title || "Step Title"}
                            </h4>
                            <p className="text-sm text-muted-foreground">
                              {step.content || "Step instructions will appear here"}
                            </p>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-4 text-muted-foreground">No steps added yet</div>
                      )}
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>

            <Button type="submit" className="w-full">
              <Save className="h-4 w-4 mr-2" />
              Publish Guide
            </Button>
          </div>
        </div>
      </form>
    </main>
  )
}


===== ./app/guides/page.tsx =====
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { ArrowRight, Plus } from "lucide-react"

// Mock guides data
const guides = [
  {
    id: "1",
    title: "Beginner's Guide to PC Building",
    description: "A step-by-step guide for first-time builders",
    difficulty: "Beginner",
    author: "PCPartVisualizer Team",
    date: "2023-01-15",
    image: "/placeholder.svg?height=200&width=400",
  },
  {
    id: "2",
    title: "How to Install a CPU",
    description: "Detailed instructions for CPU installation",
    difficulty: "Beginner",
    author: "PCPartVisualizer Team",
    date: "2023-02-10",
    image: "/placeholder.svg?height=200&width=400",
  },
  {
    id: "3",
    title: "Advanced Cable Management",
    description: "Tips and tricks for clean cable management",
    difficulty: "Intermediate",
    author: "PCPartVisualizer Team",
    date: "2023-03-05",
    image: "/placeholder.svg?height=200&width=400",
  },
  {
    id: "4",
    title: "Water Cooling Installation Guide",
    description: "Complete guide to installing a custom water cooling loop",
    difficulty: "Advanced",
    author: "PCPartVisualizer Team",
    date: "2023-04-20",
    image: "/placeholder.svg?height=200&width=400",
  },
  {
    id: "5",
    title: "Optimizing Airflow in Your Case",
    description: "Learn how to maximize airflow for better cooling",
    difficulty: "Intermediate",
    author: "PCPartVisualizer Team",
    date: "2023-05-12",
    image: "/placeholder.svg?height=200&width=400",
  },
  {
    id: "6",
    title: "RGB Lighting Setup Guide",
    description: "How to set up and synchronize RGB lighting",
    difficulty: "Intermediate",
    author: "PCPartVisualizer Team",
    date: "2023-06-08",
    image: "/placeholder.svg?height=200&width=400",
  },
]

export default function GuidesPage() {
  return (
    <div className="space-y-6">
      <div className="flex flex-col space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">Build Guides</h1>
        <p className="text-muted-foreground">Step-by-step guides to help you build your PC with confidence.</p>
      </div>

      <div className="flex justify-end">
        <Link href="/guides/create">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            Create Guide
          </Button>
        </Link>
      </div>

      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {guides.map((guide) => (
          <Card key={guide.id}>
            <CardHeader className="p-0">
              <img
                src={guide.image || "/placeholder.svg"}
                alt={guide.title}
                className="aspect-video w-full object-cover rounded-t-lg"
              />
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-muted-foreground">{guide.difficulty}</span>
                <span className="text-sm text-muted-foreground">{guide.date}</span>
              </div>
              <CardTitle className="mb-2">{guide.title}</CardTitle>
              <CardDescription>{guide.description}</CardDescription>
            </CardContent>
            <CardFooter className="flex justify-between">
              <span className="text-sm text-muted-foreground">By {guide.author}</span>
              <Link href={`/guides/${guide.id}`}>
                <Button variant="outline" size="sm">
                  View Guide
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </Link>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  )
}


===== ./app/guides/[id]/page.tsx =====
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, ThumbsUp, MessageSquare, Share2, Bookmark, Eye } from "lucide-react"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Separator } from "@/components/ui/separator"
import { useRouter } from "next/navigation"

// Mock data for a build guide
const guide = {
  id: 1,
  title: "Budget Gaming PC Build Guide",
  description:
    "A comprehensive guide to building a budget-friendly gaming PC that can handle most modern games at 1080p with good framerates.",
  author: {
    name: "PCPartVisualizer",
    avatar: "/placeholder.svg?height=40&width=40",
  },
  date: "2023-05-15",
  difficulty: "Beginner",
  category: "Gaming",
  budget: "$700-$800",
  image: "/placeholder.svg?height=400&width=800",
  views: 1245,
  likes: 87,
  comments: 24,
  components: [
    { category: "CPU", name: "AMD Ryzen 5 5600X", price: 199.99 },
    { category: "Motherboard", name: "MSI B550 Tomahawk", price: 169.99 },
    { category: "RAM", name: "Corsair Vengeance RGB Pro 16GB", price: 89.99 },
    { category: "GPU", name: "NVIDIA GeForce RTX 3060", price: 329.99 },
    { category: "Storage", name: "Samsung 970 EVO Plus 1TB", price: 119.99 },
    { category: "PSU", name: "Corsair RM650x", price: 109.99 },
    { category: "Case", name: "Corsair 4000D Airflow", price: 94.99 },
  ],
  steps: [
    {
      title: "Prepare your workspace",
      content:
        "Clear a large, well-lit space for assembly. Gather all necessary tools: screwdrivers (Phillips-head and flathead), zip ties for cable management, and anti-static equipment if available (wristband or mat). Unbox all components and verify nothing is missing or damaged.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install CPU in motherboard",
      content:
        "Carefully align the CPU with the socket, matching the alignment markers (usually a gold triangle in the corner). Gently lower the CPU into place without applying pressure. Secure the retention mechanism according to your motherboard's design. Apply a pea-sized amount of thermal paste to the center of the CPU if your cooler doesn't come with pre-applied paste.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install CPU cooler",
      content:
        "Align the cooler with the mounting brackets on the motherboard. Secure it following the manufacturer's instructions, usually by tightening screws in a diagonal pattern. Connect the CPU fan to the CPU_FAN header on the motherboard.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install RAM",
      content:
        "Align the notches on the RAM with the slots on the motherboard. For dual-channel configuration, use slots 2 and 4 (counting from the CPU). Apply even pressure until the retention clips snap into place.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install M.2 SSD (if applicable)",
      content:
        "Locate the M.2 slot on your motherboard. Insert the SSD at a 30-degree angle, then press it down and secure it with the provided screw.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Prepare the case",
      content:
        "Remove both side panels. Identify the standoffs for your motherboard form factor (ATX in this build) and ensure they're installed in the correct positions. Install the I/O shield that came with your motherboard by pressing it into place from inside the case.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install motherboard in case",
      content:
        "Carefully lower the motherboard into the case, aligning it with the I/O shield and standoffs. Secure the motherboard with screws, but don't overtighten.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install power supply",
      content:
        "Position the PSU in its designated location (usually at the bottom of the case). Secure it with screws. If your case allows, orient the fan facing downward if there's adequate ventilation underneath.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Install GPU",
      content:
        "Remove the appropriate PCI-E slot covers from the back of the case. Align the GPU with the top PCI-E x16 slot and press firmly until it clicks into place. Secure it with screws to the case.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Connect power cables",
      content:
        "Connect the 24-pin ATX power connector to the motherboard. Connect the 8-pin CPU power connector. Connect the necessary PCIe power cables to the GPU. Route cables neatly for better airflow.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Connect front panel connectors",
      content:
        "Connect the front panel connectors (power switch, reset switch, LEDs) to the appropriate headers on the motherboard. Refer to your motherboard manual for the exact layout.",
      image: "/placeholder.svg?height=300&width=500",
    },
    {
      title: "Final checks and power on",
      content:
        "Double-check all connections. Ensure all components are properly seated. Close the case. Connect peripherals (monitor, keyboard, mouse). Connect power and turn on the PC. Enter BIOS to verify all components are recognized and configure settings as needed.",
      image: "/placeholder.svg?height=300&width=500",
    },
  ],
}

export default function GuidePage({ params }: { params: { id: string } }) {
  const router = useRouter()
  const [liked, setLiked] = useState(false)
  const [bookmarked, setBookmarked] = useState(false)

  const totalPrice = guide.components.reduce((sum, component) => sum + component.price, 0)

  return (
    <main className="container mx-auto p-4 py-8">
      <Button variant="ghost" size="sm" className="mb-6" onClick={() => router.back()}>
        <ArrowLeft className="h-4 w-4 mr-2" />
        Back to Guides
      </Button>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">{guide.title}</h1>
            <p className="text-muted-foreground mb-4">{guide.description}</p>

            <div className="flex flex-wrap gap-2 mb-4">
              <Badge variant="outline">{guide.category}</Badge>
              <Badge variant="outline">{guide.difficulty}</Badge>
              <Badge variant="outline">{guide.budget}</Badge>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center">
                <Avatar className="h-8 w-8 mr-2">
                  <AvatarImage src={guide.author.avatar || "/placeholder.svg"} alt={guide.author.name} />
                  <AvatarFallback>{guide.author.name.charAt(0)}</AvatarFallback>
                </Avatar>
                <div>
                  <div className="text-sm font-medium">{guide.author.name}</div>
                  <div className="text-xs text-muted-foreground">{guide.date}</div>
                </div>
              </div>

              <div className="flex items-center text-sm text-muted-foreground">
                <Eye className="h-4 w-4 mr-1" />
                {guide.views} views
              </div>
            </div>
          </div>

          <div className="aspect-video bg-muted rounded-lg overflow-hidden">
            <img src={guide.image || "/placeholder.svg"} alt={guide.title} className="w-full h-full object-cover" />
          </div>

          <div className="flex justify-between">
            <div className="flex gap-2">
              <Button variant={liked ? "default" : "outline"} size="sm" onClick={() => setLiked(!liked)}>
                <ThumbsUp className="h-4 w-4 mr-2" />
                {liked ? guide.likes + 1 : guide.likes}
              </Button>
              <Button variant="outline" size="sm">
                <MessageSquare className="h-4 w-4 mr-2" />
                {guide.comments}
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
              <Button variant={bookmarked ? "default" : "outline"} size="sm" onClick={() => setBookmarked(!bookmarked)}>
                <Bookmark className="h-4 w-4 mr-2" />
                {bookmarked ? "Saved" : "Save"}
              </Button>
            </div>
          </div>

          <Separator />

          <div>
            <h2 className="text-2xl font-bold mb-4">Build Guide</h2>
            <div className="space-y-8">
              {guide.steps.map((step, index) => (
                <div key={index} className="space-y-4">
                  <h3 className="text-xl font-medium">
                    Step {index + 1}: {step.title}
                  </h3>
                  <div className="aspect-video bg-muted rounded-lg overflow-hidden">
                    <img
                      src={step.image || "/placeholder.svg"}
                      alt={step.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <p>{step.content}</p>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-medium mb-4">Components</h3>
              <div className="space-y-2">
                {guide.components.map((component, index) => (
                  <div key={index} className="flex justify-between text-sm border-b pb-2">
                    <span className="text-muted-foreground">{component.category}:</span>
                    <span>{component.name}</span>
                  </div>
                ))}
                <div className="flex justify-between font-medium pt-2">
                  <span>Total:</span>
                  <span>${totalPrice.toFixed(2)}</span>
                </div>
              </div>
              <div className="mt-4 space-y-2">
                <Button className="w-full">Build This PC</Button>
                <Button variant="outline" className="w-full">
                  View in 3D
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-medium mb-4">Similar Guides</h3>
              <div className="space-y-4">
                <div className="flex gap-2">
                  <div className="w-16 h-16 bg-muted rounded flex-shrink-0"></div>
                  <div>
                    <h4 className="font-medium text-sm">Mid-Range Gaming PC</h4>
                    <p className="text-xs text-muted-foreground">$1000-$1200 • Gaming</p>
                  </div>
                </div>
                <div className="flex gap-2">
                  <div className="w-16 h-16 bg-muted rounded flex-shrink-0"></div>
                  <div>
                    <h4 className="font-medium text-sm">Ultra Budget Build</h4>
                    <p className="text-xs text-muted-foreground">$500-$600 • Gaming</p>
                  </div>
                </div>
                <div className="flex gap-2">
                  <div className="w-16 h-16 bg-muted rounded flex-shrink-0"></div>
                  <div>
                    <h4 className="font-medium text-sm">First-Time Builder Guide</h4>
                    <p className="text-xs text-muted-foreground">$800-$900 • Beginner</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </main>
  )
}


===== ./app/guides/loading.tsx =====
export default function Loading() {
  return null
}


===== ./app/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


===== ./components/build-pdf.tsx =====
"use client"

import { Document, Page, Text, View, StyleSheet, Font } from "@react-pdf/renderer"
import { checkCompatibility } from "@/lib/compatibility"
import type { Component } from "@/lib/types"

// Register fonts
Font.register({
  family: "Inter",
  fonts: [
    { src: "https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2" },
    { src: "https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuGKYAZ9hiA.woff2", fontWeight: 600 },
  ],
})

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: "column",
    backgroundColor: "#ffffff",
    padding: 30,
    fontFamily: "Inter",
  },
  header: {
    marginBottom: 20,
    borderBottom: 1,
    borderColor: "#e2e8f0",
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 600,
    color: "#1e293b",
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: "#64748b",
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 600,
    color: "#1e293b",
    marginBottom: 10,
  },
  componentList: {
    marginLeft: 10,
  },
  componentItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 5,
    fontSize: 12,
  },
  componentName: {
    color: "#1e293b",
  },
  componentPrice: {
    color: "#0f172a",
    fontWeight: 600,
  },
  total: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 10,
    paddingTop: 10,
    borderTop: 1,
    borderColor: "#e2e8f0",
    fontSize: 14,
    fontWeight: 600,
  },
  warning: {
    backgroundColor: "#fee2e2",
    padding: 10,
    borderRadius: 4,
    marginTop: 10,
    fontSize: 12,
    color: "#991b1b",
  },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 30,
    right: 30,
    fontSize: 10,
    color: "#64748b",
    textAlign: "center",
  },
})

interface BuildPDFProps {
  build: {
    name: string
    date: string
    components: Component[]
  }
}

export function BuildPDF({ build }: BuildPDFProps) {
  const compatibilityIssues = checkCompatibility(build.components)
  const totalPrice = build.components.reduce((sum, component) => sum + component.price, 0)

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>{build.name}</Text>
          <Text style={styles.subtitle}>
            Generated on {new Date(build.date).toLocaleDateString()}
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Components</Text>
          <View style={styles.componentList}>
            {build.components.map((component) => (
              <View key={component.id} style={styles.componentItem}>
                <Text style={styles.componentName}>
                  {component.brand} {component.name}
                </Text>
                <Text style={styles.componentPrice}>${component.price.toFixed(2)}</Text>
              </View>
            ))}
          </View>
          <View style={styles.total}>
            <Text>Total</Text>
            <Text>${totalPrice.toFixed(2)}</Text>
          </View>
        </View>

        {compatibilityIssues.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Compatibility Warnings</Text>
            {compatibilityIssues.map((issue, index) => (
              <Text key={index} style={styles.warning}>
                {issue}
              </Text>
            ))}
          </View>
        )}

        <Text style={styles.footer}>
          Generated by PC Part Visualizer • {new Date().toLocaleDateString()}
        </Text>
      </Page>
    </Document>
  )
} 

===== ./components/saved-builds.tsx =====
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Trash2, Edit, Copy } from "lucide-react"
import { useBuildStore } from "@/lib/store"
import { formatDate } from "@/lib/utils"

export default function SavedBuilds() {
  const { savedBuilds, loadBuild, deleteBuild, duplicateBuild } = useBuildStore()
  const [expandedBuild, setExpandedBuild] = useState<string | null>(null)

  const toggleExpandBuild = (buildId: string) => {
    setExpandedBuild(expandedBuild === buildId ? null : buildId)
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Saved Builds</CardTitle>
        <CardDescription>
          {savedBuilds.length === 0
            ? "You haven't saved any builds yet"
            : `You have ${savedBuilds.length} saved build${savedBuilds.length !== 1 ? "s" : ""}`}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {savedBuilds.length === 0 ? (
          <div className="text-center py-6 text-muted-foreground">Save your current build to see it here</div>
        ) : (
          <div className="space-y-3">
            {savedBuilds.map((build) => (
              <div key={build.id} className="border rounded-lg p-3">
                <div className="flex justify-between items-start">
                  <div>
                    <div className="font-medium">{build.name}</div>
                    <div className="text-sm text-muted-foreground">
                      {formatDate(build.date)} • {build.components.length} components
                    </div>
                  </div>
                  <div className="flex gap-1">
                    <Button variant="ghost" size="icon" onClick={() => duplicateBuild(build.id)}>
                      <Copy className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" onClick={() => deleteBuild(build.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div className="mt-2 flex justify-between items-center">
                  <div className="text-sm">
                    Total: ${build.components.reduce((sum, c) => sum + c.price, 0).toFixed(2)}
                  </div>
                  <Button variant="outline" size="sm" onClick={() => toggleExpandBuild(build.id)}>
                    {expandedBuild === build.id ? "Hide Details" : "Show Details"}
                  </Button>
                </div>

                {expandedBuild === build.id && (
                  <div className="mt-3 space-y-2 border-t pt-2">
                    {build.components.map((component) => (
                      <div key={component.id} className="flex justify-between text-sm">
                        <span>
                          {component.category}: {component.name}
                        </span>
                        <span>${component.price.toFixed(2)}</span>
                      </div>
                    ))}
                    <div className="pt-2">
                      <Button size="sm" onClick={() => loadBuild(build.id)}>
                        <Edit className="h-4 w-4 mr-1" /> Load Build
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}


===== ./components/lighting-controls.tsx =====
"use client"

import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { useBuildStore } from "@/lib/store"
import { Sun, Moon, Zap } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export function LightingControls() {
  const { currentBuild, updateLighting } = useBuildStore()
  const { toast } = useToast()

  // Provide a fallback lighting object if missing
  const lighting = currentBuild.lighting ?? { intensity: 0.5, color: "#ffffff" }

  const handleIntensityChange = (value: number[]) => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before adjusting lighting",
        variant: "destructive",
      })
      return
    }

    updateLighting({ intensity: value[0] })
  }

  const handlePreset = (preset: "day" | "night" | "studio") => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before adjusting lighting",
        variant: "destructive",
      })
      return
    }

    const presets = {
      day: { intensity: 1.0, color: "#ffffff" },
      night: { intensity: 0.3, color: "#1a1a1a" },
      studio: { intensity: 0.7, color: "#f5f5f5" }
    }

    updateLighting(presets[preset])
    toast({
      title: "Lighting Updated",
      description: `Applied ${preset} lighting preset`,
    })
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <span className="text-sm font-medium">Lighting Intensity</span>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => handlePreset("day")}
            disabled={currentBuild.components.length === 0}
          >
            <Sun className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => handlePreset("night")}
            disabled={currentBuild.components.length === 0}
          >
            <Moon className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => handlePreset("studio")}
            disabled={currentBuild.components.length === 0}
          >
            <Zap className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <Slider
        defaultValue={[lighting.intensity]}
        min={0}
        max={1}
        step={0.1}
        onValueChange={handleIntensityChange}
        disabled={currentBuild.components.length === 0}
      />
    </div>
  )
}


===== ./components/case-panel-toggle.tsx =====
"use client"

import { Button } from "@/components/ui/button"
import { useBuildStore } from "@/lib/store"
import { Eye, EyeOff } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export function CasePanelToggle() {
  const { currentBuild, toggleCaseVisibility } = useBuildStore()
  const { toast } = useToast()

  const handleToggleCase = () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before toggling case visibility",
        variant: "destructive",
      })
      return
    }

    toggleCaseVisibility()
    toast({
      title: "Case Visibility Updated",
      description: `Case panel is now ${currentBuild.showCase ? "visible" : "hidden"}`,
    })
  }

  return (
    <Button
      variant="outline"
      onClick={handleToggleCase}
      disabled={currentBuild.components.length === 0}
      className="w-full"
    >
      {currentBuild.showCase ? (
        <>
          <Eye className="h-4 w-4 mr-2" />
          Show Case Panel
        </>
      ) : (
        <>
          <EyeOff className="h-4 w-4 mr-2" />
          Hide Case Panel
        </>
      )}
    </Button>
  )
} 

===== ./components/psu-calculator.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { useBuildStore } from "@/lib/store"
import { calculatePowerConsumption, recommendPSU } from "@/lib/psu-calculator"
import { AlertCircle, Zap, Check } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export default function PSUCalculator() {
  const { currentBuild } = useBuildStore()
  const [powerConsumption, setPowerConsumption] = useState(0)
  const [recommendation, setRecommendation] = useState<{
    wattage: number
    efficiency: string
    headroom: number
  } | null>(null)

  useEffect(() => {
    const consumption = calculatePowerConsumption(currentBuild.components)
    setPowerConsumption(consumption)
    setRecommendation(recommendPSU(consumption))
  }, [currentBuild.components])

  // Check if the current PSU is adequate
  const currentPSU = currentBuild.components.find((c) => c.category === "psu")
  const currentPSUWattage = currentPSU
    ? Number.parseInt(currentPSU.specs.find((spec) => spec.name === "Wattage")?.value || "0")
    : 0

  const isPSUAdequate = currentPSU && currentPSUWattage >= powerConsumption * 1.2

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Zap className="h-5 w-5 mr-2" />
          Power Supply Calculator
        </CardTitle>
        <CardDescription>Calculate the recommended PSU wattage for your build</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {currentBuild.components.length === 0 ? (
          <div className="text-center py-6 text-muted-foreground">
            Add components to your build to calculate power requirements
          </div>
        ) : (
          <>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium">Estimated Power Consumption</span>
                <Badge variant="outline">{powerConsumption} W</Badge>
              </div>
              <Progress value={(powerConsumption / 750) * 100} className="h-2" />
              <div className="grid grid-cols-5 text-xs text-muted-foreground">
                <div>0W</div>
                <div className="text-center">250W</div>
                <div className="text-center">500W</div>
                <div className="text-center">750W</div>
                <div className="text-right">1000W+</div>
              </div>
            </div>

            {currentPSU && (
              <div className="pt-2">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Current PSU</span>
                  <Badge variant={isPSUAdequate ? "outline" : "destructive"}>{currentPSUWattage} W</Badge>
                </div>

                {isPSUAdequate ? (
                  <Alert variant="default" className="bg-green-500/10 text-green-500 border-green-500/20">
                    <Check className="h-4 w-4" />
                    <AlertTitle>Adequate Power Supply</AlertTitle>
                    <AlertDescription>
                      Your current PSU provides sufficient power for this build with{" "}
                      {Math.round((currentPSUWattage / powerConsumption - 1) * 100)}% headroom.
                    </AlertDescription>
                  </Alert>
                ) : (
                  <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>Insufficient Power Supply</AlertTitle>
                    <AlertDescription>
                      Your current PSU may not provide enough power for this build. We recommend at least{" "}
                      {recommendation?.wattage}W.
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            )}

            {recommendation && (
              <div className="pt-2 space-y-2">
                <h4 className="text-sm font-medium">Recommended PSU</h4>
                <div className="border rounded-lg p-4">
                  <div className="flex justify-between mb-2">
                    <span className="font-medium">{recommendation.wattage}W</span>
                    <Badge>{recommendation.efficiency}</Badge>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    We recommend a {recommendation.wattage}W power supply with {recommendation.efficiency} efficiency
                    rating. This provides {recommendation.headroom}% headroom for power spikes and future upgrades.
                  </p>
                </div>
              </div>
            )}

            <div className="space-y-2 pt-2">
              <h4 className="text-sm font-medium">Component Power Breakdown</h4>
              <div className="space-y-1 text-sm">
                {currentBuild.components.map((component) => {
                  let componentPower = 0

                  if (component.category === "cpu" || component.category === "gpu") {
                    const tdpSpec = component.specs.find((spec) => spec.name === "TDP")
                    if (tdpSpec) {
                      componentPower = Number.parseInt(tdpSpec.value)
                    } else {
                      // Estimate based on component type
                      componentPower = component.category === "cpu" ? 95 : 200
                    }
                  } else if (component.category === "ram") {
                    componentPower = 10
                  } else if (component.category === "storage") {
                    componentPower = component.name.includes("HDD") ? 10 : 5
                  }

                  return componentPower > 0 ? (
                    <div key={component.id} className="flex justify-between">
                      <span className="text-muted-foreground">{component.name}</span>
                      <span>{componentPower} W</span>
                    </div>
                  ) : null
                })}
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Other components & overhead</span>
                  <span>~50 W</span>
                </div>
              </div>
            </div>
          </>
        )}
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" asChild>
          <a href="/parts?category=psu">Browse Power Supplies</a>
        </Button>
      </CardFooter>
    </Card>
  )
}


===== ./components/shipping-estimates.tsx =====
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { useBuildStore } from "@/lib/store"
import { Badge } from "@/components/ui/badge"
import { Truck } from "lucide-react"

export function ShippingEstimates() {
  const { currentBuild } = useBuildStore()

  // Mock shipping data - in a real app this would come from an API
  const getShippingEstimate = () => {
    if (currentBuild.components.length === 0) return null

    // Simulate different shipping times based on component count
    const baseDays = 3
    const additionalDays = Math.min(Math.floor(currentBuild.components.length / 2), 4)
    const totalDays = baseDays + additionalDays

    // Simulate shipping cost based on component count and total price
    const baseCost = 10
    const componentCost = currentBuild.components.length * 2
    const priceBasedCost = Math.min(currentBuild.components.reduce((sum, c) => sum + c.price, 0) * 0.02, 50)
    const totalCost = baseCost + componentCost + priceBasedCost

    return {
      days: totalDays,
      cost: totalCost,
      expressAvailable: currentBuild.components.length > 0,
      expressCost: totalCost * 1.5,
      expressDays: Math.max(1, totalDays - 2)
    }
  }

  const shipping = getShippingEstimate()

  if (!shipping) {
    return null
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Truck className="h-5 w-5" />
          Shipping Estimates
        </CardTitle>
        <CardDescription>
          Estimated delivery times and costs for your build
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-sm text-muted-foreground">Standard Shipping</span>
            <Badge variant="outline">{shipping.days} days</Badge>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-sm text-muted-foreground">Shipping Cost</span>
            <span className="font-medium">${shipping.cost.toFixed(2)}</span>
          </div>
        </div>

        {shipping.expressAvailable && (
          <div className="space-y-2 pt-4 border-t">
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Express Shipping</span>
              <Badge variant="outline">{shipping.expressDays} days</Badge>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Express Cost</span>
              <span className="font-medium">${shipping.expressCost.toFixed(2)}</span>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
} 

===== ./components/pdf-export.tsx =====
"use client"

import { Button } from "@/components/ui/button"
import { useBuildStore } from "@/lib/store"
import { Download } from "lucide-react"
import { generateBuildPDF } from "@/lib/pdf-generator"
import { useToast } from "@/hooks/use-toast"

export function PdfExport() {
  const { currentBuild } = useBuildStore()
  const { toast } = useToast()

  const handleExportPDF = () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before exporting",
        variant: "destructive",
      })
      return
    }

    const doc = generateBuildPDF(currentBuild)
    doc.save(`${currentBuild.name.replace(/\s+/g, "-").toLowerCase()}.pdf`)

    toast({
      title: "PDF Exported",
      description: "Your build has been exported as a PDF",
    })
  }

  return (
    <Button
      variant="outline"
      onClick={handleExportPDF}
      disabled={currentBuild.components.length === 0}
      className="w-full"
    >
      <Download className="h-4 w-4 mr-2" />
      Export Build as PDF
    </Button>
  )
} 

===== ./components/mode-toggle.tsx =====
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}


===== ./components/navbar.tsx =====
import { MainNav } from "@/components/main-nav"
import { ModeToggle } from "@/components/mode-toggle"

export function Navbar() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-14 items-center">
        <div className="mr-4 hidden md:flex">
          <Link href="/" className="flex items-center space-x-2">
            <Cpu className="h-6 w-6" />
            <span className="font-bold">PCPartVisualizer</span>
          </Link>
        </div>
        <MainNav />
        <div className="ml-auto flex items-center space-x-4">
          <ModeToggle />
        </div>
      </div>
    </header>
  )
}

import { Cpu } from "lucide-react"
import Link from "next/link"


===== ./components/main-nav.tsx =====
"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import { Home, Cpu, BookOpen, Users, HardDrive, HelpCircle } from "lucide-react"

const navItems = [
  {
    name: "Home",
    href: "/",
    icon: Home,
  },
  {
    name: "Build",
    href: "/build",
    icon: Cpu,
  },
  {
    name: "Guides",
    href: "/guides",
    icon: BookOpen,
  },
  {
    name: "Community",
    href: "/community",
    icon: Users,
  },
  {
    name: "Parts",
    href: "/parts",
    icon: HardDrive,
  },
  {
    name: "Help",
    href: "/help",
    icon: HelpCircle,
  },
]

export function MainNav() {
  const pathname = usePathname()

  return (
    <nav className="flex items-center space-x-4 lg:space-x-6">
      {navItems.map((item) => (
        <Link
          key={item.href}
          href={item.href}
          className={cn(
            "flex items-center text-sm font-medium transition-colors hover:text-primary",
            pathname === item.href ? "text-primary" : "text-muted-foreground",
          )}
        >
          <item.icon className="mr-2 h-4 w-4" />
          {item.name}
        </Link>
      ))}
    </nav>
  )
}


===== ./components/ui/toaster.tsx =====
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


===== ./components/ui/toast.tsx =====
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


===== ./components/ui/scroll-area.tsx =====
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


===== ./components/ui/context-menu.tsx =====
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


===== ./components/ui/sidebar.tsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


===== ./components/ui/aspect-ratio.tsx =====
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


===== ./components/ui/slider.tsx =====
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


===== ./components/ui/tooltip.tsx =====
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


===== ./components/ui/pagination.tsx =====
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


===== ./components/ui/chart.tsx =====
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


===== ./components/ui/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


===== ./components/ui/toggle-group.tsx =====
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


===== ./components/ui/radio-group.tsx =====
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


===== ./components/ui/breadcrumb.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


===== ./components/ui/input-otp.tsx =====
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


===== ./components/ui/alert.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


===== ./components/ui/skeleton.tsx =====
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


===== ./components/ui/button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


===== ./components/ui/card.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


===== ./components/ui/hover-card.tsx =====
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


===== ./components/ui/accordion.tsx =====
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


===== ./components/ui/collapsible.tsx =====
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


===== ./components/ui/avatar.tsx =====
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


===== ./components/ui/badge.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


===== ./components/ui/carousel.tsx =====
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


===== ./components/ui/command.tsx =====
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


===== ./components/ui/input.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


===== ./components/ui/switch.tsx =====
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


===== ./components/ui/tabs.tsx =====
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


===== ./components/ui/sheet.tsx =====
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


===== ./components/ui/sonner.tsx =====
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


===== ./components/ui/progress.tsx =====
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


===== ./components/ui/table.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


===== ./components/ui/toggle.tsx =====
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


===== ./components/ui/textarea.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


===== ./components/ui/drawer.tsx =====
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


===== ./components/ui/dropdown-menu.tsx =====
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


===== ./components/ui/calendar.tsx =====
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


===== ./components/ui/select.tsx =====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


===== ./components/ui/resizable.tsx =====
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


===== ./components/ui/alert-dialog.tsx =====
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


===== ./components/ui/popover.tsx =====
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


===== ./components/ui/separator.tsx =====
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


===== ./components/ui/checkbox.tsx =====
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


===== ./components/ui/dialog.tsx =====
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


===== ./components/ui/form.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


===== ./components/ui/navigation-menu.tsx =====
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


===== ./components/ui/menubar.tsx =====
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


===== ./components/ui/label.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


===== ./components/ui/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


===== ./components/build-list.tsx =====
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { AlertCircle, Save, Trash2, Download, Share2, Zap } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { useBuildStore } from "@/lib/store"
import { checkCompatibility } from "@/lib/compatibility"
import { getPriceComparisons } from "@/lib/price-comparison"
import { calculatePowerConsumption, recommendPSU } from "@/lib/psu-calculator"
import { exportBuildToPDF } from "@/lib/export-pdf"
import { copyShareableLink } from "@/lib/share-build"
import { useToast } from "@/hooks/use-toast"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Progress } from "@/components/ui/progress"

export default function BuildList() {
  const { currentBuild, removeComponent, saveBuild, clearBuild } = useBuildStore()
  const [showPriceComparison, setShowPriceComparison] = useState<string | null>(null)
  const { toast } = useToast()

  const compatibilityIssues = checkCompatibility(currentBuild.components)
  const totalPrice = currentBuild.components.reduce((sum, component) => sum + component.price, 0)

  // Calculate power consumption
  const powerConsumption = calculatePowerConsumption(currentBuild.components)
  const psuRecommendation = recommendPSU(powerConsumption)

  // Check if current PSU is adequate
  const currentPSU = currentBuild.components.find((c) => c.category === "psu")
  let psuAdequate = true
  let currentPSUWattage = 0

  if (currentPSU) {
    const wattageSpec = currentPSU.specs.find((spec) => spec.name === "Wattage")
    if (wattageSpec) {
      currentPSUWattage = Number.parseInt(wattageSpec.value)
      psuAdequate = currentPSUWattage >= powerConsumption * 1.2
    }
  }

  const handleSaveBuild = () => {
    if (currentBuild.components.length > 0) {
      saveBuild({
        ...currentBuild,
        id: Date.now().toString(),
        name: `Build #${Math.floor(Math.random() * 1000)}`,
        date: new Date().toISOString(),
      })

      toast({
        title: "Build Saved",
        description: "Your build has been saved successfully",
      })
    }
  }

  const togglePriceComparison = (componentId: string) => {
    setShowPriceComparison(showPriceComparison === componentId ? null : componentId)
  }

  const handleExportPDF = () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before exporting",
        variant: "destructive",
      })
      return
    }

    exportBuildToPDF(currentBuild)
    toast({
      title: "PDF Exported",
      description: "Your build has been exported as a PDF",
    })
  }

  const handleShareBuild = async () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before sharing",
        variant: "destructive",
      })
      return
    }

    const success = await copyShareableLink(currentBuild)
    if (success) {
      toast({
        title: "Link Copied",
        description: "Shareable link copied to clipboard",
      })
    } else {
      toast({
        title: "Error",
        description: "Failed to copy link to clipboard",
        variant: "destructive",
      })
    }
  }

  // Calculate estimated shipping time
  const getEstimatedShipping = () => {
    // In a real app, this would be based on retailer data
    // For now, we'll return a random date between 3-10 days from now
    const today = new Date()
    const daysToAdd = Math.floor(Math.random() * 7) + 3
    const deliveryDate = new Date(today)
    deliveryDate.setDate(today.getDate() + daysToAdd)

    return deliveryDate.toLocaleDateString("en-US", {
      weekday: "long",
      month: "long",
      day: "numeric",
    })
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Current Build</CardTitle>
        <CardDescription>
          {currentBuild.components.length === 0
            ? "Add components to start your build"
            : `${currentBuild.components.length} components selected`}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {compatibilityIssues.length > 0 && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Compatibility Issues</AlertTitle>
            <AlertDescription>
              <ul className="list-disc pl-5 text-sm">
                {compatibilityIssues.map((issue, index) => (
                  <li key={index}>{issue}</li>
                ))}
              </ul>
            </AlertDescription>
          </Alert>
        )}

        {currentBuild.components.length > 0 && (
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" className="w-full" size="sm">
                <Zap className="mr-2 h-4 w-4" />
                Power Consumption: {powerConsumption}W
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Power Consumption Analysis</DialogTitle>
                <DialogDescription>Estimated power requirements and PSU recommendations</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Estimated Power Draw:</span>
                    <span className="font-medium">{powerConsumption}W</span>
                  </div>
                  <Progress value={(powerConsumption / 1000) * 100} className="h-2" />
                </div>

                {currentPSU && (
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Current PSU:</span>
                      <span className="font-medium">
                        {currentPSU.name} ({currentPSUWattage}W)
                      </span>
                    </div>
                    <Alert variant={psuAdequate ? "default" : "destructive"}>
                      <AlertTitle>{psuAdequate ? "Adequate Power Supply" : "Insufficient Power Supply"}</AlertTitle>
                      <AlertDescription>
                        {psuAdequate
                          ? `Your PSU has ${Math.round((currentPSUWattage / powerConsumption - 1) * 100)}% headroom, which is sufficient.`
                          : `Your PSU may not provide enough power. We recommend at least ${psuRecommendation.wattage}W.`}
                      </AlertDescription>
                    </Alert>
                  </div>
                )}

                <div className="space-y-2">
                  <h4 className="font-medium">Recommendation</h4>
                  <div className="border rounded-md p-3">
                    <div className="flex justify-between mb-1">
                      <span>Recommended Wattage:</span>
                      <span className="font-medium">{psuRecommendation.wattage}W</span>
                    </div>
                    <div className="flex justify-between mb-1">
                      <span>Recommended Efficiency:</span>
                      <span className="font-medium">{psuRecommendation.efficiency}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Headroom for Future Upgrades:</span>
                      <span className="font-medium">{psuRecommendation.headroom}%</span>
                    </div>
                  </div>
                </div>

                <div className="text-sm text-muted-foreground">
                  Note: Power consumption is estimated based on component specifications. Actual power draw may vary
                  depending on usage and overclocking.
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {currentBuild.components.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            Your build is empty. Start by adding components from the search panel.
          </div>
        ) : (
          <div className="space-y-3">
            {currentBuild.components.map((component) => {
              const priceComparisons = getPriceComparisons(component.id)

              return (
                <div key={component.id} className="border rounded-lg p-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="font-medium">{component.name}</div>
                      <div className="flex items-center gap-2 mt-1">
                        <Badge variant="outline">{component.brand}</Badge>
                        <Badge variant="secondary">{component.category}</Badge>
                      </div>
                    </div>
                    <Button variant="ghost" size="icon" onClick={() => removeComponent(component.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>

                  <div className="mt-2 flex justify-between items-center">
                    <div className="font-medium">${component.price.toFixed(2)}</div>
                    <Button variant="outline" size="sm" onClick={() => togglePriceComparison(component.id)}>
                      Compare Prices
                    </Button>
                  </div>

                  {showPriceComparison === component.id && (
                    <div className="mt-3 space-y-2 border-t pt-2">
                      <div className="text-sm font-medium">Price Comparison</div>
                      {priceComparisons.map((price, index) => (
                        <div key={index} className="flex justify-between text-sm">
                          <span>{price.retailer}</span>
                          <span className={price.price < component.price ? "text-green-600 font-medium" : ""}>
                            ${price.price.toFixed(2)}
                          </span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )
            })}

            <div className="flex justify-between items-center pt-2 border-t">
              <div className="font-bold">Total</div>
              <div className="font-bold">${totalPrice.toFixed(2)}</div>
            </div>

            {currentBuild.components.length >= 3 && (
              <div className="text-sm text-muted-foreground">
                Estimated delivery: {getEstimatedShipping()} if ordered today
              </div>
            )}
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={clearBuild} disabled={currentBuild.components.length === 0}>
          Clear Build
        </Button>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleExportPDF} disabled={currentBuild.components.length === 0}>
            <Download className="h-4 w-4 mr-1" /> Export
          </Button>
          <Button variant="outline" onClick={handleShareBuild} disabled={currentBuild.components.length === 0}>
            <Share2 className="h-4 w-4 mr-1" /> Share
          </Button>
          <Button onClick={handleSaveBuild} disabled={currentBuild.components.length === 0}>
            <Save className="h-4 w-4 mr-1" /> Save Build
          </Button>
        </div>
      </CardFooter>
    </Card>
  )
}


===== ./components/pc-visualizer.tsx =====
"use client"

import { useRef, useState } from "react"
import { Canvas, useFrame, useThree } from "@react-three/fiber"
import { OrbitControls, PerspectiveCamera, Environment, Html } from "@react-three/drei"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
  AlertCircle,
  Maximize,
  Minimize,
  RotateCw,
  Eye,
  EyeOff,
  Layers,
  Download,
  Share2,
  Palette,
  Lightbulb,
} from "lucide-react"
import { useBuildStore } from "@/lib/store"
import { checkCompatibility } from "@/lib/compatibility"
import { exportBuildToPDF } from "@/lib/export-pdf"
import { copyShareableLink } from "@/lib/share-build"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { useToast } from "@/hooks/use-toast"
import { HexColorPicker } from "react-colorful"

export default function PCVisualizer() {
  const { currentBuild } = useBuildStore()
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [showLabels, setShowLabels] = useState(true)
  const [explodedView, setExplodedView] = useState(false)
  const [sidePanel, setSidePanel] = useState<"left" | "right" | "none">("right")
  const [lightingEnabled, setLightingEnabled] = useState(false)
  const [lightingColor, setLightingColor] = useState("#ff0000")
  const [lightingIntensity, setLightingIntensity] = useState(50)
  const { toast } = useToast()
  const compatibilityIssues = checkCompatibility(currentBuild.components)

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen)
  }

  const toggleLabels = () => {
    setShowLabels(!showLabels)
  }

  const toggleExplodedView = () => {
    setExplodedView(!explodedView)
  }

  const handleExportPDF = () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before exporting",
        variant: "destructive",
      })
      return
    }

    exportBuildToPDF(currentBuild)
    toast({
      title: "PDF Exported",
      description: "Your build has been exported as a PDF",
    })
  }

  const handleShareBuild = async () => {
    if (currentBuild.components.length === 0) {
      toast({
        title: "No components selected",
        description: "Add components to your build before sharing",
        variant: "destructive",
      })
      return
    }

    const success = await copyShareableLink(currentBuild)
    if (success) {
      toast({
        title: "Link Copied",
        description: "Shareable link copied to clipboard",
      })
    } else {
      toast({
        title: "Error",
        description: "Failed to copy link to clipboard",
        variant: "destructive",
      })
    }
  }

  return (
    <Card className={`w-full ${isFullscreen ? "fixed inset-0 z-50 rounded-none" : ""}`}>
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle>3D Visualizer</CardTitle>
          <CardDescription>
            {currentBuild.components.length === 0
              ? "Add components to visualize your build"
              : "Rotate and zoom to inspect your build"}
          </CardDescription>
        </div>
        <div className="flex gap-2">
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" size="icon" title="Customize lighting">
                <Lightbulb className="h-4 w-4" />
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Customize Lighting</DialogTitle>
                <DialogDescription>Adjust RGB lighting settings for your PC build</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="flex items-center justify-between">
                  <span>Enable RGB Lighting</span>
                  <Button
                    variant={lightingEnabled ? "default" : "outline"}
                    onClick={() => setLightingEnabled(!lightingEnabled)}
                  >
                    {lightingEnabled ? "On" : "Off"}
                  </Button>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Lighting Color</label>
                  <HexColorPicker color={lightingColor} onChange={setLightingColor} />
                </div>

                <div className="space-y-2">
                  <div className="flex justify-between">
                    <label className="text-sm font-medium">Intensity</label>
                    <span className="text-sm">{lightingIntensity}%</span>
                  </div>
                  <Slider
                    value={[lightingIntensity]}
                    min={0}
                    max={100}
                    step={1}
                    onValueChange={(value) => setLightingIntensity(value[0])}
                  />
                </div>
              </div>
            </DialogContent>
          </Dialog>

          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" size="icon" title="Case options">
                <Palette className="h-4 w-4" />
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Case Options</DialogTitle>
                <DialogDescription>Customize your PC case view</DialogDescription>
              </DialogHeader>
              <Tabs defaultValue="panels" className="py-4">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="panels">Side Panels</TabsTrigger>
                  <TabsTrigger value="view">View Options</TabsTrigger>
                </TabsList>
                <TabsContent value="panels" className="space-y-4 pt-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Side Panel</label>
                    <div className="grid grid-cols-3 gap-2">
                      <Button
                        variant={sidePanel === "left" ? "default" : "outline"}
                        onClick={() => setSidePanel("left")}
                        className="h-20"
                      >
                        Left Panel
                      </Button>
                      <Button
                        variant={sidePanel === "none" ? "default" : "outline"}
                        onClick={() => setSidePanel("none")}
                        className="h-20"
                      >
                        No Panels
                      </Button>
                      <Button
                        variant={sidePanel === "right" ? "default" : "outline"}
                        onClick={() => setSidePanel("right")}
                        className="h-20"
                      >
                        Right Panel
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="view" className="space-y-4 pt-4">
                  <div className="flex items-center justify-between">
                    <span>Exploded View</span>
                    <Button variant={explodedView ? "default" : "outline"} onClick={toggleExplodedView}>
                      {explodedView ? "On" : "Off"}
                    </Button>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Component Labels</span>
                    <Button variant={showLabels ? "default" : "outline"} onClick={toggleLabels}>
                      {showLabels ? "On" : "Off"}
                    </Button>
                  </div>
                </TabsContent>
              </Tabs>
            </DialogContent>
          </Dialog>

          <Button
            variant="outline"
            size="icon"
            onClick={toggleLabels}
            title={showLabels ? "Hide labels" : "Show labels"}
          >
            {showLabels ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
          </Button>

          <Button
            variant="outline"
            size="icon"
            onClick={toggleExplodedView}
            title={explodedView ? "Compact view" : "Exploded view"}
          >
            <Layers className="h-4 w-4" />
          </Button>

          <Button variant="outline" size="icon" onClick={toggleFullscreen}>
            {isFullscreen ? <Minimize className="h-4 w-4" /> : <Maximize className="h-4 w-4" />}
          </Button>
        </div>
      </CardHeader>
      <CardContent className={`p-0 ${isFullscreen ? "h-[calc(100vh-4rem)]" : "h-[500px]"}`}>
        <Canvas shadows>
          <PerspectiveCamera makeDefault position={[0, 0, 5]} />
          <ambientLight intensity={0.5} />
          <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} intensity={1} castShadow />
          <directionalLight position={[-10, -10, -5]} intensity={0.5} />
          <Environment preset="studio" />

          <DetailedPCCase
            hasComponents={currentBuild.components.length > 0}
            compatibilityIssues={compatibilityIssues}
            showLabels={showLabels}
            explodedView={explodedView}
            components={currentBuild.components}
            sidePanel={sidePanel}
            lightingEnabled={lightingEnabled}
            lightingColor={lightingColor}
            lightingIntensity={lightingIntensity / 100}
          />

          <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} minDistance={2} maxDistance={10} />
        </Canvas>

        {compatibilityIssues.length > 0 && (
          <div className="absolute bottom-4 left-4 right-4 bg-destructive/90 text-destructive-foreground p-3 rounded-md">
            <div className="flex items-start gap-2">
              <AlertCircle className="h-5 w-5 mt-0.5 flex-shrink-0" />
              <div>
                <div className="font-medium">Compatibility Issues Detected</div>
                <div className="text-sm mt-1">
                  {compatibilityIssues[0]}
                  {compatibilityIssues.length > 1 && ` (+${compatibilityIssues.length - 1} more)`}
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between">
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={handleExportPDF} disabled={currentBuild.components.length === 0}>
            <Download className="mr-2 h-4 w-4" /> Export PDF
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleShareBuild}
            disabled={currentBuild.components.length === 0}
          >
            <Share2 className="mr-2 h-4 w-4" /> Share Build
          </Button>
        </div>
      </CardFooter>
    </Card>
  )
}

function DetailedPCCase({
  hasComponents,
  compatibilityIssues,
  showLabels,
  explodedView,
  components,
  sidePanel,
  lightingEnabled,
  lightingColor,
  lightingIntensity,
}) {
  const groupRef = useRef()
  const hasIssues = compatibilityIssues.length > 0
  const { viewport, gl } = useThree()

  // Slowly rotate the entire PC
  useFrame((state) => {
    if (groupRef.current) {
      groupRef.current.rotation.y = Math.sin(state.clock.getElapsedTime() * 0.1) * 0.2
    }
  })

  // Calculate component positions based on exploded view
  const positions = {
    case: [0, 0, 0],
    motherboard: [0, 0, explodedView ? 0.3 : 0.2],
    cpu: [0, 0.7, explodedView ? 0.8 : 0.3],
    gpu: [0, -0.3, explodedView ? 0.8 : 0.3],
    ram: [0.5, 0.3, explodedView ? 0.8 : 0.3],
    psu: [0, -1.2, explodedView ? 0.8 : 0.3],
    storage: [-0.6, 0.3, explodedView ? 0.8 : 0.3],
    fans: [0, 0, explodedView ? -0.5 : -0.4],
  }

  // Get component details for labels
  const getComponentName = (category) => {
    const component = components.find((c) => c.category === category)
    return component ? component.name : category.toUpperCase()
  }

  // Create RGB lighting
  const rgbLightRef = useRef()
  useFrame((state) => {
    if (rgbLightRef.current && lightingEnabled) {
      rgbLightRef.current.intensity = lightingIntensity
    }
  })

  return (
    <group ref={groupRef}>
      {/* PC Case */}
      <mesh receiveShadow castShadow position={positions.case}>
        <boxGeometry args={[2.2, 3.2, 1.2]} />
        <meshStandardMaterial
          color={hasIssues ? "#fda4af" : "#e2e8f0"}
          transparent
          opacity={0.4}
          metalness={0.6}
          roughness={0.2}
        />

        {/* Case frame */}
        <mesh>
          <boxGeometry args={[2.22, 3.22, 1.22]} />
          <meshStandardMaterial color="#1e293b" wireframe={true} transparent opacity={0.7} />
        </mesh>

        {/* Front panel with mesh */}
        <mesh position={[0, 0, 0.61]}>
          <planeGeometry args={[2, 3]} />
          <meshStandardMaterial color="#1e293b" transparent opacity={0.9} />

          {/* Front mesh pattern */}
          <mesh position={[0, 0, 0.01]}>
            <planeGeometry args={[1.8, 1.2]} />
            <meshStandardMaterial color="#334155" wireframe={true} transparent opacity={0.7} />
          </mesh>

          {/* Power button */}
          <mesh position={[0, 1.4, 0.01]}>
            <cylinderGeometry args={[0.05, 0.05, 0.02, 16]} />
            <meshStandardMaterial color="#94a3b8" metalness={0.8} roughness={0.2} />
          </mesh>

          {/* USB ports */}
          <group position={[0, 1.2, 0.01]}>
            <mesh position={[-0.15, 0, 0]}>
              <boxGeometry args={[0.06, 0.02, 0.01]} />
              <meshStandardMaterial color="#000000" />
            </mesh>
            <mesh position={[0.15, 0, 0]}>
              <boxGeometry args={[0.06, 0.02, 0.01]} />
              <meshStandardMaterial color="#000000" />
            </mesh>
          </group>
        </mesh>

        {/* Side panel (tempered glass) - configurable */}
        {sidePanel === "right" && (
          <mesh position={[1.11, 0, 0]} rotation={[0, Math.PI / 2, 0]}>
            <planeGeometry args={[1.2, 3]} />
            <meshPhysicalMaterial
              color="#94a3b8"
              transparent
              opacity={0.3}
              metalness={0.9}
              roughness={0}
              transmission={0.9}
              thickness={0.05}
            />
          </mesh>
        )}

        {/* Left side panel - configurable */}
        {sidePanel === "left" && (
          <mesh position={[-1.11, 0, 0]} rotation={[0, -Math.PI / 2, 0]}>
            <planeGeometry args={[1.2, 3]} />
            <meshPhysicalMaterial
              color="#94a3b8"
              transparent
              opacity={0.3}
              metalness={0.9}
              roughness={0}
              transmission={0.9}
              thickness={0.05}
            />
          </mesh>
        )}

        {/* RGB Lighting */}
        {lightingEnabled && (
          <pointLight
            ref={rgbLightRef}
            position={[0, 0, 0]}
            intensity={lightingIntensity}
            distance={3}
            color={lightingColor}
          />
        )}

        {/* Components inside */}
        {hasComponents && (
          <>
            {/* Motherboard */}
            <mesh position={positions.motherboard} receiveShadow castShadow>
              <boxGeometry args={[1.7, 2.4, 0.1]} />
              <meshStandardMaterial color="#334155" metalness={0.5} roughness={0.8} />

              {/* Motherboard details */}
              <group>
                {/* CPU socket */}
                <mesh position={[0, 0.7, 0.051]}>
                  <boxGeometry args={[0.52, 0.52, 0.001]} />
                  <meshStandardMaterial color="#1e293b" />
                </mesh>

                {/* RAM slots */}
                <group position={[0.5, 0.3, 0.051]}>
                  <mesh position={[0, 0.15, 0]}>
                    <boxGeometry args={[0.1, 0.2, 0.001]} />
                    <meshStandardMaterial color="#1e293b" />
                  </mesh>
                  <mesh position={[0, -0.15, 0]}>
                    <boxGeometry args={[0.1, 0.2, 0.001]} />
                    <meshStandardMaterial color="#1e293b" />
                  </mesh>
                </group>

                {/* PCIe slots */}
                <group position={[0, -0.3, 0.051]}>
                  <mesh position={[0, 0, 0]}>
                    <boxGeometry args={[1.4, 0.1, 0.001]} />
                    <meshStandardMaterial color="#1e293b" />
                  </mesh>
                  <mesh position={[0, -0.2, 0]}>
                    <boxGeometry args={[1.4, 0.1, 0.001]} />
                    <meshStandardMaterial color="#1e293b" />
                  </mesh>
                </group>

                {/* SATA ports */}
                <group position={[-0.6, 0.3, 0.051]}>
                  <mesh position={[0, 0.1, 0]}>
                    <boxGeometry args={[0.3, 0.05, 0.001]} />
                    <meshStandardMaterial color="#ef4444" />
                  </mesh>
                  <mesh position={[0, 0, 0]}>
                    <boxGeometry args={[0.3, 0.05, 0.001]} />
                    <meshStandardMaterial color="#ef4444" />
                  </mesh>
                  <mesh position={[0, -0.1, 0]}>
                    <boxGeometry args={[0.3, 0.05, 0.001]} />
                    <meshStandardMaterial color="#ef4444" />
                  </mesh>
                </group>

                {/* I/O shield */}
                <mesh position={[-0.8, 0.7, 0]}>
                  <boxGeometry args={[0.1, 1, 0.1]} />
                  <meshStandardMaterial color="#64748b" metalness={0.7} roughness={0.3} />
                </mesh>
              </group>
            </mesh>

            {/* CPU */}
            <mesh position={positions.cpu} receiveShadow castShadow>
              <boxGeometry args={[0.5, 0.5, 0.05]} />
              <meshStandardMaterial color={hasIssues ? "#ef4444" : "#64748b"} metalness={0.8} roughness={0.2} />

              {/* CPU cooler */}
              <group>
                <mesh position={[0, 0, 0.1]}>
                  <cylinderGeometry args={[0.25, 0.25, 0.1, 16]} />
                  <meshStandardMaterial color="#94a3b8" metalness={0.7} roughness={0.3} />
                </mesh>
                <mesh position={[0, 0, 0.2]}>
                  <cylinderGeometry args={[0.05, 0.05, 0.2, 16]} />
                  <meshStandardMaterial color="#64748b" />
                </mesh>
                <mesh position={[0, 0, 0.3]}>
                  <boxGeometry args={[0.4, 0.4, 0.02]} />
                  <meshStandardMaterial color="#94a3b8" />
                </mesh>
              </group>
            </mesh>

            {/* GPU */}
            <mesh position={positions.gpu} receiveShadow castShadow>
              <boxGeometry args={[1.6, 0.4, 0.1]} />
              <meshStandardMaterial color="#334155" metalness={0.6} roughness={0.4} />

              {/* GPU details */}
              <group>
                <mesh position={[0, 0, 0.051]}>
                  <boxGeometry args={[1.4, 0.3, 0.001]} />
                  <meshStandardMaterial color="#1e293b" metalness={0.7} roughness={0.3} />
                </mesh>

                {/* GPU fans */}
                <group>
                  <mesh position={[-0.5, 0, 0.1]}>
                    <cylinderGeometry args={[0.15, 0.15, 0.02, 16]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                  <mesh position={[0, 0, 0.1]}>
                    <cylinderGeometry args={[0.15, 0.15, 0.02, 16]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                  <mesh position={[0.5, 0, 0.1]}>
                    <cylinderGeometry args={[0.15, 0.15, 0.02, 16]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                </group>

                {/* Display ports */}
                <group position={[-0.7, 0, -0.051]}>
                  <mesh position={[0, 0.05, 0]}>
                    <boxGeometry args={[0.1, 0.03, 0.001]} />
                    <meshStandardMaterial color="#000000" />
                  </mesh>
                  <mesh position={[0, -0.05, 0]}>
                    <boxGeometry args={[0.1, 0.03, 0.001]} />
                    <meshStandardMaterial color="#000000" />
                  </mesh>
                </group>
              </group>
            </mesh>

            {/* RAM */}
            <group position={positions.ram}>
              <mesh position={[0, 0.25, 0]} receiveShadow castShadow>
                <boxGeometry args={[0.1, 0.4, 0.2]} />
                <meshStandardMaterial color="#475569" metalness={0.6} roughness={0.4} />

                {/* RAM heatsink pattern */}
                <mesh position={[0.051, 0, 0]}>
                  <boxGeometry args={[0.001, 0.38, 0.18]} />
                  <meshStandardMaterial color="#94a3b8" metalness={0.8} roughness={0.2} />
                </mesh>
              </mesh>

              <mesh position={[0, -0.25, 0]} receiveShadow castShadow>
                <boxGeometry args={[0.1, 0.4, 0.2]} />
                <meshStandardMaterial color="#475569" metalness={0.6} roughness={0.4} />

                {/* RAM heatsink pattern */}
                <mesh position={[0.051, 0, 0]}>
                  <boxGeometry args={[0.001, 0.38, 0.18]} />
                  <meshStandardMaterial color="#94a3b8" metalness={0.8} roughness={0.2} />
                </mesh>
              </mesh>
            </group>

            {/* PSU */}
            <mesh position={positions.psu} receiveShadow castShadow>
              <boxGeometry args={[1.4, 0.6, 0.6]} />
              <meshStandardMaterial color="#1e293b" metalness={0.7} roughness={0.3} />

              {/* PSU details */}
              <group>
                <mesh position={[0, 0, 0.301]}>
                  <planeGeometry args={[1.3, 0.5]} />
                  <meshStandardMaterial color="#000000" metalness={0.8} roughness={0.2} />
                </mesh>

                {/* PSU fan */}
                <mesh position={[0, 0, 0.302]} rotation={[0, 0, Math.PI / 4]}>
                  <cylinderGeometry args={[0.2, 0.2, 0.001, 16]} />
                  <meshStandardMaterial color="#64748b" metalness={0.6} roughness={0.4} />
                </mesh>

                {/* Power cable */}
                <mesh position={[-0.65, 0, 0]} rotation={[0, Math.PI / 2, 0]}>
                  <cylinderGeometry args={[0.05, 0.05, 0.1, 16]} />
                  <meshStandardMaterial color="#000000" />
                </mesh>
              </group>
            </mesh>

            {/* Storage */}
            <group position={positions.storage}>
              {/* SSD */}
              <mesh position={[0, 0.15, 0]} receiveShadow castShadow>
                <boxGeometry args={[0.35, 0.25, 0.05]} />
                <meshStandardMaterial color="#475569" metalness={0.6} roughness={0.4} />

                {/* SSD label */}
                <mesh position={[0, 0, 0.026]}>
                  <planeGeometry args={[0.3, 0.2]} />
                  <meshStandardMaterial color="#1e293b" />
                </mesh>
              </mesh>

              {/* HDD */}
              <mesh position={[0, -0.15, 0]} receiveShadow castShadow>
                <boxGeometry args={[0.35, 0.25, 0.1]} />
                <meshStandardMaterial color="#64748b" metalness={0.7} roughness={0.3} />

                {/* HDD label */}
                <mesh position={[0, 0, 0.051]}>
                  <planeGeometry args={[0.3, 0.2]} />
                  <meshStandardMaterial color="#334155" />
                </mesh>
              </mesh>
            </group>

            {/* Case fans */}
            <group position={positions.fans}>
              {/* Rear fan */}
              <group position={[-0.9, 0.7, 0]}>
                <mesh>
                  <cylinderGeometry args={[0.3, 0.3, 0.05, 16]} />
                  <meshStandardMaterial color="#1e293b" transparent opacity={0.7} />
                </mesh>
                <mesh rotation={[0, 0, (state) => Math.sin(state.clock.getElapsedTime() * 5)]}>
                  <torusGeometry args={[0.2, 0.02, 16, 100]} />
                  <meshStandardMaterial color="#64748b" />
                </mesh>
                <mesh>
                  <sphereGeometry args={[0.05, 16, 16]} />
                  <meshStandardMaterial color="#94a3b8" />
                </mesh>
              </group>

              {/* Front fans */}
              <group position={[0, 0, -0.5]}>
                <group position={[0, 0.7, 0]}>
                  <mesh>
                    <cylinderGeometry args={[0.3, 0.3, 0.05, 16]} />
                    <meshStandardMaterial color="#1e293b" transparent opacity={0.7} />
                  </mesh>
                  <mesh rotation={[0, 0, (state) => Math.sin(state.clock.getElapsedTime() * 5)]}>
                    <torusGeometry args={[0.2, 0.02, 16, 100]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                  <mesh>
                    <sphereGeometry args={[0.05, 16, 16]} />
                    <meshStandardMaterial color="#94a3b8" />
                  </mesh>
                </group>

                <group position={[0, 0, 0]}>
                  <mesh>
                    <cylinderGeometry args={[0.3, 0.3, 0.05, 16]} />
                    <meshStandardMaterial color="#1e293b" transparent opacity={0.7} />
                  </mesh>
                  <mesh rotation={[0, 0, (state) => Math.sin(state.clock.getElapsedTime() * 5)]}>
                    <torusGeometry args={[0.2, 0.02, 16, 100]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                  <mesh>
                    <sphereGeometry args={[0.05, 16, 16]} />
                    <meshStandardMaterial color="#94a3b8" />
                  </mesh>
                </group>

                <group position={[0, -0.7, 0]}>
                  <mesh>
                    <cylinderGeometry args={[0.3, 0.3, 0.05, 16]} />
                    <meshStandardMaterial color="#1e293b" transparent opacity={0.7} />
                  </mesh>
                  <mesh rotation={[0, 0, (state) => Math.sin(state.clock.getElapsedTime() * 5)]}>
                    <torusGeometry args={[0.2, 0.02, 16, 100]} />
                    <meshStandardMaterial color="#64748b" />
                  </mesh>
                  <mesh>
                    <sphereGeometry args={[0.05, 16, 16]} />
                    <meshStandardMaterial color="#94a3b8" />
                  </mesh>
                </group>
              </group>
            </group>

            {/* Component labels */}
            {showLabels && (
              <>
                <Html position={[positions.cpu[0], positions.cpu[1], positions.cpu[2] + 0.5]} center>
                  <Badge variant={hasIssues ? "destructive" : "secondary"} className="text-xs whitespace-nowrap">
                    CPU: {getComponentName("cpu")}
                  </Badge>
                </Html>

                <Html position={[positions.gpu[0], positions.gpu[1], positions.gpu[2] + 0.3]} center>
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    GPU: {getComponentName("gpu")}
                  </Badge>
                </Html>

                <Html position={[positions.ram[0], positions.ram[1], positions.ram[2] + 0.3]} center>
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    RAM: {getComponentName("ram")}
                  </Badge>
                </Html>

                <Html position={[positions.psu[0], positions.psu[1], positions.psu[2] + 0.4]} center>
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    PSU: {getComponentName("psu")}
                  </Badge>
                </Html>

                <Html position={[positions.storage[0], positions.storage[1], positions.storage[2] + 0.3]} center>
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    Storage: {getComponentName("storage")}
                  </Badge>
                </Html>

                <Html
                  position={[positions.motherboard[0], positions.motherboard[1] - 1, positions.motherboard[2] + 0.2]}
                  center
                >
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    Motherboard: {getComponentName("motherboard")}
                  </Badge>
                </Html>

                <Html position={[positions.case[0], positions.case[1] + 1.7, positions.case[2]]} center>
                  <Badge variant="secondary" className="text-xs whitespace-nowrap">
                    Case: {getComponentName("case")}
                  </Badge>
                </Html>
              </>
            )}
          </>
        )}
      </mesh>

      {/* Controls hint */}
      <Html position={[0, -2, 0]} center>
        <div className="bg-background/80 text-foreground px-2 py-1 rounded text-xs flex items-center">
          <RotateCw className="h-3 w-3 mr-1" /> Drag to rotate, scroll to zoom
        </div>
      </Html>
    </group>
  )
}


===== ./components/theme-provider.tsx =====
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


===== ./components/component-search.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Search, Plus, SlidersHorizontal } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { useBuildStore } from "@/lib/store"
import type { Component, ComponentCategory } from "@/lib/types"
import { mockComponents } from "@/lib/mock-data"
import { Slider } from "@/components/ui/slider"
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"

export default function ComponentSearch() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<ComponentCategory>("cpu")
  const [filteredComponents, setFilteredComponents] = useState<Component[]>([])
  const { addComponent, currentBuild } = useBuildStore()
  const { toast } = useToast()

  // Filters
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000])
  const [selectedBrands, setSelectedBrands] = useState<string[]>([])
  const [maxPowerConsumption, setMaxPowerConsumption] = useState<number>(500)
  const [sortBy, setSortBy] = useState<string>("price-asc")

  // Get unique brands for the current category
  const availableBrands = [
    ...new Set(mockComponents.filter((c) => c.category === selectedCategory).map((c) => c.brand)),
  ].sort()

  useEffect(() => {
    let filtered = mockComponents.filter((component) => {
      const matchesCategory = component.category === selectedCategory
      const matchesSearch =
        searchTerm === "" ||
        component.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        component.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
        component.specs.some(
          (spec) =>
            spec.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            spec.value.toLowerCase().includes(searchTerm.toLowerCase()),
        )

      // Price filter
      const matchesPrice = component.price >= priceRange[0] && component.price <= priceRange[1]

      // Brand filter
      const matchesBrand = selectedBrands.length === 0 || selectedBrands.includes(component.brand)

      // Power consumption filter (only for CPU and GPU)
      let matchesPower = true
      if (component.category === "cpu" || component.category === "gpu") {
        const tdpSpec = component.specs.find((spec) => spec.name === "TDP")
        if (tdpSpec) {
          const tdp = Number.parseInt(tdpSpec.value)
          matchesPower = tdp <= maxPowerConsumption
        }
      }
      

      return matchesCategory && matchesSearch && matchesPrice && matchesBrand && matchesPower
    })

    // Sort components
    switch (sortBy) {
      case "price-asc":
        filtered = filtered.sort((a, b) => a.price - b.price)
        break
      case "price-desc":
        filtered = filtered.sort((a, b) => b.price - a.price)
        break
      case "name-asc":
        filtered = filtered.sort((a, b) => a.name.localeCompare(b.name))
        break
      case "name-desc":
        filtered = filtered.sort((a, b) => b.name.localeCompare(a.name))
        break
    }

    setFilteredComponents(filtered)
  }, [searchTerm, selectedCategory, priceRange, selectedBrands, maxPowerConsumption, sortBy])

  const handleAddComponent = (component: Component) => {
    // Check if a component of this category already exists in the build
    const existingComponent = currentBuild.components.find((c) => c.category === component.category)

    if (existingComponent) {
      toast({
        title: "Component replaced",
        description: `Replaced ${existingComponent.name} with ${component.name}`,
      })
    } else {
      toast({
        title: "Component added",
        description: `Added ${component.name} to your build`,
      })
    }

    addComponent(component)
  }

  const toggleBrand = (brand: string) => {
    if (selectedBrands.includes(brand)) {
      setSelectedBrands(selectedBrands.filter((b) => b !== brand))
    } else {
      setSelectedBrands([...selectedBrands, brand])
    }
  }

  // Get max price for the current category
  const maxPrice = Math.max(...mockComponents.filter((c) => c.category === selectedCategory).map((c) => c.price))

  // Reset filters when category changes
  useEffect(() => {
    setPriceRange([0, maxPrice])
    setSelectedBrands([])
    setMaxPowerConsumption(500)
  }, [selectedCategory, maxPrice])

  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div>
            <CardTitle>Component Search</CardTitle>
            <CardDescription>Search and add components to your build</CardDescription>
          </div>
          <Sheet>
            <SheetTrigger asChild>
              <Button variant="outline" size="sm">
                <SlidersHorizontal className="h-4 w-4 mr-2" />
                Filters
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>Filter Components</SheetTitle>
                <SheetDescription>Refine your search with additional filters</SheetDescription>
              </SheetHeader>
              <div className="space-y-6 py-4">
                <div className="space-y-2">
                  <h4 className="font-medium">Price Range</h4>
                  <div className="flex justify-between text-sm">
                    <span>${priceRange[0].toFixed(2)}</span>
                    <span>${priceRange[1].toFixed(2)}</span>
                  </div>
                  <Slider
                    value={priceRange}
                    min={0}
                    max={maxPrice}
                    step={10}
                    onValueChange={(value) => setPriceRange([value[0], value[1]])}
                    className="mt-2"
                  />
                </div>

                <div className="space-y-2">
                  <h4 className="font-medium">Brands</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {availableBrands.map((brand) => (
                      <div key={brand} className="flex items-center space-x-2">
                        <Checkbox
                          id={`brand-${brand}`}
                          checked={selectedBrands.includes(brand)}
                          onCheckedChange={() => toggleBrand(brand)}
                        />
                        <Label htmlFor={`brand-${brand}`}>{brand}</Label>
                      </div>
                    ))}
                  </div>
                </div>

                {(selectedCategory === "cpu" || selectedCategory === "gpu") && (
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <h4 className="font-medium">Max Power Consumption</h4>
                      <span>{maxPowerConsumption}W</span>
                    </div>
                    <Slider
                      value={[maxPowerConsumption]}
                      min={0}
                      max={500}
                      step={10}
                      onValueChange={(value) => setMaxPowerConsumption(value[0])}
                    />
                  </div>
                )}

                <div className="space-y-2">
                  <h4 className="font-medium">Sort By</h4>
                  <Select value={sortBy} onValueChange={setSortBy}>
                    <SelectTrigger>
                      <SelectValue placeholder="Sort by" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="price-asc">Price: Low to High</SelectItem>
                      <SelectItem value="price-desc">Price: High to Low</SelectItem>
                      <SelectItem value="name-asc">Name: A to Z</SelectItem>
                      <SelectItem value="name-desc">Name: Z to A</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2">
          <div className="relative flex-grow">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="text"
              placeholder="Search by name or brand..."
              className="pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        <Tabs defaultValue="cpu" onValueChange={(value) => setSelectedCategory(value as ComponentCategory)}>
          <TabsList className="grid grid-cols-4 md:grid-cols-7">
            <TabsTrigger value="cpu">CPU</TabsTrigger>
            <TabsTrigger value="motherboard">Motherboard</TabsTrigger>
            <TabsTrigger value="ram">RAM</TabsTrigger>
            <TabsTrigger value="gpu">GPU</TabsTrigger>
            <TabsTrigger value="storage">Storage</TabsTrigger>
            <TabsTrigger value="psu">PSU</TabsTrigger>
            <TabsTrigger value="case">Case</TabsTrigger>
          </TabsList>

          <TabsContent value={selectedCategory} className="mt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredComponents.length > 0 ? (
                filteredComponents.map((component) => (
                  <Card key={component.id} className="overflow-hidden">
                    <CardHeader className="p-4">
                      <CardTitle className="text-base">{component.name}</CardTitle>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">{component.brand}</Badge>
                        <Badge variant="secondary">{component.category}</Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-4 pt-0">
                      <div className="text-sm space-y-2">
                        {component.specs.map((spec, index) => (
                          <div key={index} className="flex justify-between">
                            <span className="text-muted-foreground">{spec.name}:</span>
                            <span>{spec.value}</span>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                    <CardFooter className="p-4 flex justify-between">
                      <div className="font-medium">${component.price.toFixed(2)}</div>
                      <Button size="sm" onClick={() => handleAddComponent(component)}>
                        <Plus className="h-4 w-4 mr-1" /> Add
                      </Button>
                    </CardFooter>
                  </Card>
                ))
              ) : (
                <div className="col-span-full text-center py-8 text-muted-foreground">
                  No components found. Try adjusting your search or filters.
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}


===== ./styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


===== ./lib/utils.ts =====
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(dateString: string): string {
  const date = new Date(dateString)
  return new Intl.DateTimeFormat("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  }).format(date)
}


===== ./lib/store.ts =====
"use client"

import { create } from "zustand"
import { persist } from "zustand/middleware"
import type { Component, PCBuild } from "./types"

interface BuildState {
  currentBuild: PCBuild
  savedBuilds: PCBuild[]
  addComponent: (component: Component) => void
  removeComponent: (componentId: string) => void
  clearBuild: () => void
  saveBuild: (build: PCBuild) => void
  loadBuild: (buildId: string) => void
  deleteBuild: (buildId: string) => void
  duplicateBuild: (buildId: string) => void
}

export const useBuildStore = create<BuildState>()(
  persist(
    (set) => ({
      currentBuild: {
        id: "current",
        name: "Current Build",
        date: new Date().toISOString(),
        components: [],
      },
      savedBuilds: [],

      addComponent: (component) =>
        set((state) => {
          // Remove any existing component of the same category
          const filteredComponents = state.currentBuild.components.filter((c) => c.category !== component.category)

          return {
            currentBuild: {
              ...state.currentBuild,
              components: [...filteredComponents, component],
            },
          }
        }),

      removeComponent: (componentId) =>
        set((state) => ({
          currentBuild: {
            ...state.currentBuild,
            components: state.currentBuild.components.filter((component) => component.id !== componentId),
          },
        })),

      clearBuild: () =>
        set((state) => ({
          currentBuild: {
            ...state.currentBuild,
            components: [],
          },
        })),

      saveBuild: (build) =>
        set((state) => ({
          savedBuilds: [...state.savedBuilds, build],
        })),

      loadBuild: (buildId) =>
        set((state) => {
          const buildToLoad = state.savedBuilds.find((build) => build.id === buildId)

          if (!buildToLoad) return state

          return {
            currentBuild: {
              ...state.currentBuild,
              components: [...buildToLoad.components],
            },
          }
        }),

      deleteBuild: (buildId) =>
        set((state) => ({
          savedBuilds: state.savedBuilds.filter((build) => build.id !== buildId),
        })),

      duplicateBuild: (buildId) =>
        set((state) => {
          const buildToDuplicate = state.savedBuilds.find((build) => build.id === buildId)

          if (!buildToDuplicate) return state

          const duplicatedBuild = {
            ...buildToDuplicate,
            id: Date.now().toString(),
            name: `${buildToDuplicate.name} (Copy)`,
            date: new Date().toISOString(),
          }

          return {
            savedBuilds: [...state.savedBuilds, duplicatedBuild],
          }
        }),
    }),
    {
      name: "pc-part-visualizer-storage",
    },
  ),
)


===== ./lib/types.ts =====
export type ComponentCategory = "cpu" | "motherboard" | "ram" | "gpu" | "storage" | "psu" | "case"

export interface ComponentSpec {
  name: string
  value: string
}

export interface Component {
  id: string
  name: string
  brand: string
  category: ComponentCategory
  specs: ComponentSpec[]
  price: number
}

export interface RetailerPrice {
  retailer: string
  price: number
  url: string
}

export interface ComponentWithPrices extends Component {
  retailerPrices: RetailerPrice[]
}

export interface PCBuild {
  id: string
  name: string
  date: string
  components: Component[]
}


===== ./lib/compatibility.ts =====
import type { Component } from "./types"

export function checkCompatibility(components: Component[]): string[] {
  const issues: string[] = []

  // Get components by category
  const cpu = components.find((c) => c.category === "cpu")
  const motherboard = components.find((c) => c.category === "motherboard")
  const ram = components.find((c) => c.category === "ram")
  const gpu = components.find((c) => c.category === "gpu")
  const psu = components.find((c) => c.category === "psu")

  // Check CPU and Motherboard socket compatibility
  if (cpu && motherboard) {
    const cpuSocket = cpu.specs.find((spec) => spec.name === "Socket")?.value
    const mbSocket = motherboard.specs.find((spec) => spec.name === "Socket")?.value

    if (cpuSocket && mbSocket && cpuSocket !== mbSocket) {
      issues.push(`CPU socket (${cpuSocket}) is not compatible with motherboard socket (${mbSocket}).`)
    }
  }

  // Check RAM and Motherboard compatibility
  if (ram && motherboard) {
    const ramType = ram.specs.find((spec) => spec.name === "Type")?.value

    // Simple check for DDR4 vs DDR5
    if (ramType === "DDR5" && motherboard.name.includes("B550")) {
      issues.push(`${ram.name} (DDR5) is not compatible with ${motherboard.name} which supports DDR4.`)
    }

    if (ramType === "DDR4" && motherboard.name.includes("Z690")) {
      issues.push(`${ram.name} (DDR4) may not be compatible with ${motherboard.name} which typically supports DDR5.`)
    }
  }

  // Check power requirements
  if (gpu && psu) {
    const gpuTDP = Number.parseInt(gpu.specs.find((spec) => spec.name === "TDP")?.value || "0")
    const psuWattage = Number.parseInt(psu.specs.find((spec) => spec.name === "Wattage")?.value || "0")

    // Simple check - assume GPU needs at least 2x its TDP in PSU wattage
    if (gpuTDP * 2 > psuWattage) {
      issues.push(`PSU wattage (${psuWattage}W) may be insufficient for GPU with TDP of ${gpuTDP}W.`)
    }
  }

  // Check total power requirements
  const totalTDP = components.reduce((total, component) => {
    const tdpSpec = component.specs.find((spec) => spec.name === "TDP")
    if (tdpSpec) {
      return total + Number.parseInt(tdpSpec.value)
    }
    return total
  }, 0)

  if (psu && totalTDP > 0) {
    const psuWattage = Number.parseInt(psu.specs.find((spec) => spec.name === "Wattage")?.value || "0")

    if (totalTDP > psuWattage * 0.8) {
      issues.push(
        `Total system power draw (${totalTDP}W) is approaching PSU capacity (${psuWattage}W). Consider a higher wattage PSU.`,
      )
    }
  }

  return issues
}


===== ./lib/pdf-generator.ts =====
import { jsPDF } from "jspdf"
import type { Component } from "@/lib/types"
import { checkCompatibility } from "@/lib/compatibility"

export function generateBuildPDF(build: {
  name: string
  date: string
  components: Component[]
}) {
  const doc = new jsPDF()
  const compatibilityIssues = checkCompatibility(build.components)
  const totalPrice = build.components.reduce((sum, component) => sum + component.price, 0)

  // Set font
  doc.setFont("helvetica", "bold")
  doc.setFontSize(24)
  doc.text(build.name, 20, 20)

  // Subtitle
  doc.setFont("helvetica", "normal")
  doc.setFontSize(12)
  doc.text(`Generated on ${new Date(build.date).toLocaleDateString()}`, 20, 30)

  // Components section
  doc.setFont("helvetica", "bold")
  doc.setFontSize(16)
  doc.text("Components", 20, 50)

  // Component list
  doc.setFont("helvetica", "normal")
  doc.setFontSize(12)
  let y = 60
  build.components.forEach((component) => {
    doc.text(`${component.brand} ${component.name}`, 20, y)
    doc.text(`$${component.price.toFixed(2)}`, 180, y, { align: "right" })
    y += 10
  })

  // Total
  doc.setFont("helvetica", "bold")
  doc.text("Total", 20, y + 10)
  doc.text(`$${totalPrice.toFixed(2)}`, 180, y + 10, { align: "right" })

  // Compatibility warnings
  if (compatibilityIssues.length > 0) {
    y += 30
    doc.setFont("helvetica", "bold")
    doc.setFontSize(14)
    doc.text("Compatibility Warnings", 20, y)

    doc.setFont("helvetica", "normal")
    doc.setFontSize(12)
    compatibilityIssues.forEach((issue) => {
      y += 10
      doc.text(issue, 20, y)
    })
  }

  // Footer
  const pageHeight = doc.internal.pageSize.height
  doc.setFont("helvetica", "normal")
  doc.setFontSize(10)
  doc.text(
    `Generated by PC Part Visualizer • ${new Date().toLocaleDateString()}`,
    105,
    pageHeight - 20,
    { align: "center" }
  )

  return doc
} 

===== ./lib/psu-calculator.ts =====
import type { Component } from "./types"

// Calculate estimated power consumption for a build
export function calculatePowerConsumption(components: Component[]): number {
  let totalPower = 0

  // Base system power (motherboard, fans, etc.)
  totalPower += 50

  // Add power for each component
  components.forEach((component) => {
    switch (component.category) {
      case "cpu":
        // Get TDP from specs or estimate
        const cpuTdp = component.specs.find((spec) => spec.name === "TDP")
        if (cpuTdp) {
          totalPower += Number.parseInt(cpuTdp.value)
        } else {
          // Estimate based on CPU name
          if (component.name.includes("i9") || component.name.includes("Ryzen 9")) {
            totalPower += 125
          } else if (component.name.includes("i7") || component.name.includes("Ryzen 7")) {
            totalPower += 95
          } else {
            totalPower += 65
          }
        }
        break

      case "gpu":
        // Get TDP from specs or estimate
        const gpuTdp = component.specs.find((spec) => spec.name === "TDP")
        if (gpuTdp) {
          totalPower += Number.parseInt(gpuTdp.value)
        } else {
          // Estimate based on GPU name
          if (component.name.includes("3090") || component.name.includes("6900")) {
            totalPower += 350
          } else if (component.name.includes("3080") || component.name.includes("6800")) {
            totalPower += 320
          } else if (component.name.includes("3070") || component.name.includes("6700")) {
            totalPower += 220
          } else {
            totalPower += 150
          }
        }
        break

      case "ram":
        // Estimate RAM power consumption
        totalPower += 10
        break

      case "storage":
        // Estimate storage power consumption
        if (component.name.includes("HDD") || component.specs.some((spec) => spec.value.includes("HDD"))) {
          totalPower += 10
        } else {
          totalPower += 5
        }
        break

      default:
        break
    }
  })

  return totalPower
}

// Recommend a PSU based on power consumption
export function recommendPSU(powerConsumption: number): {
  wattage: number
  efficiency: string
  headroom: number
} {
  // Add 40% headroom for future upgrades and power spikes
  const recommendedWattage = Math.ceil((powerConsumption * 1.4) / 50) * 50

  // Determine efficiency rating based on power consumption
  let efficiency = "80+ Bronze"
  if (powerConsumption > 500) {
    efficiency = "80+ Gold"
  } else if (powerConsumption > 300) {
    efficiency = "80+ Silver"
  }

  return {
    wattage: recommendedWattage,
    efficiency,
    headroom: Math.round((recommendedWattage / powerConsumption - 1) * 100),
  }
}

// Filter PSUs based on power requirements
export function filterCompatiblePSUs(psus: Component[], powerConsumption: number): Component[] {
  return psus.filter((psu) => {
    const wattageSpec = psu.specs.find((spec) => spec.name === "Wattage")
    if (!wattageSpec) return false

    const wattage = Number.parseInt(wattageSpec.value)
    // PSU should have at least 20% headroom
    return wattage >= powerConsumption * 1.2
  })
}


===== ./lib/mock-data.ts =====
import type { Component } from "./types"

export const mockComponents: Component[] = [
  // CPUs
  {
    id: "cpu-1",
    name: "Ryzen 7 5800X",
    brand: "AMD",
    category: "cpu",
    specs: [
      { name: "Cores", value: "8" },
      { name: "Threads", value: "16" },
      { name: "Base Clock", value: "3.8 GHz" },
      { name: "Socket", value: "AM4" },
      { name: "TDP", value: "105W" },
    ],
    price: 299.99,
  },
  {
    id: "cpu-2",
    name: "Core i7-12700K",
    brand: "Intel",
    category: "cpu",
    specs: [
      { name: "Cores", value: "12 (8P+4E)" },
      { name: "Threads", value: "20" },
      { name: "Base Clock", value: "3.6 GHz" },
      { name: "Socket", value: "LGA1700" },
      { name: "TDP", value: "125W" },
    ],
    price: 379.99,
  },
  {
    id: "cpu-3",
    name: "Ryzen 5 5600X",
    brand: "AMD",
    category: "cpu",
    specs: [
      { name: "Cores", value: "6" },
      { name: "Threads", value: "12" },
      { name: "Base Clock", value: "3.7 GHz" },
      { name: "Socket", value: "AM4" },
      { name: "TDP", value: "65W" },
    ],
    price: 199.99,
  },
  {
    id: "cpu-4",
    name: "Core i5-12600K",
    brand: "Intel",
    category: "cpu",
    specs: [
      { name: "Cores", value: "10 (6P+4E)" },
      { name: "Threads", value: "16" },
      { name: "Base Clock", value: "3.7 GHz" },
      { name: "Socket", value: "LGA1700" },
      { name: "TDP", value: "125W" },
    ],
    price: 279.99,
  },

  // Motherboards
  {
    id: "mb-1",
    name: "B550 Tomahawk",
    brand: "MSI",
    category: "motherboard",
    specs: [
      { name: "Socket", value: "AM4" },
      { name: "Form Factor", value: "ATX" },
      { name: "Memory Slots", value: "4" },
      { name: "Max Memory", value: "128GB" },
      { name: "PCIe x16 Slots", value: "2" },
    ],
    price: 169.99,
  },
  {
    id: "mb-2",
    name: "Z690 Aorus Elite",
    brand: "Gigabyte",
    category: "motherboard",
    specs: [
      { name: "Socket", value: "LGA1700" },
      { name: "Form Factor", value: "ATX" },
      { name: "Memory Slots", value: "4" },
      { name: "Max Memory", value: "128GB" },
      { name: "PCIe x16 Slots", value: "2" },
    ],
    price: 249.99,
  },
  {
    id: "mb-3",
    name: "X570 Gaming Plus",
    brand: "MSI",
    category: "motherboard",
    specs: [
      { name: "Socket", value: "AM4" },
      { name: "Form Factor", value: "ATX" },
      { name: "Memory Slots", value: "4" },
      { name: "Max Memory", value: "128GB" },
      { name: "PCIe x16 Slots", value: "2" },
    ],
    price: 159.99,
  },
  {
    id: "mb-4",
    name: "B660 Gaming X",
    brand: "Gigabyte",
    category: "motherboard",
    specs: [
      { name: "Socket", value: "LGA1700" },
      { name: "Form Factor", value: "ATX" },
      { name: "Memory Slots", value: "4" },
      { name: "Max Memory", value: "128GB" },
      { name: "PCIe x16 Slots", value: "1" },
    ],
    price: 149.99,
  },

  // RAM
  {
    id: "ram-1",
    name: "Vengeance RGB Pro 32GB",
    brand: "Corsair",
    category: "ram",
    specs: [
      { name: "Capacity", value: "32GB (2x16GB)" },
      { name: "Type", value: "DDR4" },
      { name: "Speed", value: "3600MHz" },
      { name: "CAS Latency", value: "CL18" },
      { name: "Voltage", value: "1.35V" },
    ],
    price: 129.99,
  },
  {
    id: "ram-2",
    name: "Trident Z RGB 16GB",
    brand: "G.Skill",
    category: "ram",
    specs: [
      { name: "Capacity", value: "16GB (2x8GB)" },
      { name: "Type", value: "DDR4" },
      { name: "Speed", value: "3200MHz" },
      { name: "CAS Latency", value: "CL16" },
      { name: "Voltage", value: "1.35V" },
    ],
    price: 89.99,
  },
  {
    id: "ram-3",
    name: "Fury Beast 32GB",
    brand: "Kingston",
    category: "ram",
    specs: [
      { name: "Capacity", value: "32GB (2x16GB)" },
      { name: "Type", value: "DDR5" },
      { name: "Speed", value: "5200MHz" },
      { name: "CAS Latency", value: "CL40" },
      { name: "Voltage", value: "1.25V" },
    ],
    price: 169.99,
  },
  {
    id: "ram-4",
    name: "Dominator Platinum 32GB",
    brand: "Corsair",
    category: "ram",
    specs: [
      { name: "Capacity", value: "32GB (2x16GB)" },
      { name: "Type", value: "DDR5" },
      { name: "Speed", value: "5600MHz" },
      { name: "CAS Latency", value: "CL36" },
      { name: "Voltage", value: "1.25V" },
    ],
    price: 219.99,
  },

  // GPUs
  {
    id: "gpu-1",
    name: "GeForce RTX 3070",
    brand: "NVIDIA",
    category: "gpu",
    specs: [
      { name: "VRAM", value: "8GB GDDR6" },
      { name: "Boost Clock", value: "1.73 GHz" },
      { name: "CUDA Cores", value: "5888" },
      { name: "Power Connectors", value: "1x 12-pin" },
      { name: "TDP", value: "220W" },
    ],
    price: 599.99,
  },
  {
    id: "gpu-2",
    name: "Radeon RX 6800 XT",
    brand: "AMD",
    category: "gpu",
    specs: [
      { name: "VRAM", value: "16GB GDDR6" },
      { name: "Boost Clock", value: "2.25 GHz" },
      { name: "Stream Processors", value: "4608" },
      { name: "Power Connectors", value: "2x 8-pin" },
      { name: "TDP", value: "300W" },
    ],
    price: 649.99,
  },
  {
    id: "gpu-3",
    name: "GeForce RTX 3080",
    brand: "NVIDIA",
    category: "gpu",
    specs: [
      { name: "VRAM", value: "10GB GDDR6X" },
      { name: "Boost Clock", value: "1.71 GHz" },
      { name: "CUDA Cores", value: "8704" },
      { name: "Power Connectors", value: "2x 8-pin" },
      { name: "TDP", value: "320W" },
    ],
    price: 699.99,
  },
  {
    id: "gpu-4",
    name: "Radeon RX 6700 XT",
    brand: "AMD",
    category: "gpu",
    specs: [
      { name: "VRAM", value: "12GB GDDR6" },
      { name: "Boost Clock", value: "2.58 GHz" },
      { name: "Stream Processors", value: "2560" },
      { name: "Power Connectors", value: "1x 8-pin + 1x 6-pin" },
      { name: "TDP", value: "230W" },
    ],
    price: 479.99,
  },

  // Storage
  {
    id: "storage-1",
    name: "970 EVO Plus 1TB",
    brand: "Samsung",
    category: "storage",
    specs: [
      { name: "Capacity", value: "1TB" },
      { name: "Type", value: "NVMe SSD" },
      { name: "Read Speed", value: "3500 MB/s" },
      { name: "Write Speed", value: "3300 MB/s" },
      { name: "Form Factor", value: "M.2 2280" },
    ],
    price: 119.99,
  },
  {
    id: "storage-2",
    name: "Barracuda 2TB",
    brand: "Seagate",
    category: "storage",
    specs: [
      { name: "Capacity", value: "2TB" },
      { name: "Type", value: "HDD" },
      { name: "Speed", value: "7200 RPM" },
      { name: "Cache", value: "256MB" },
      { name: "Form Factor", value: '3.5"' },
    ],
    price: 54.99,
  },
  {
    id: "storage-3",
    name: "SN850 2TB",
    brand: "Western Digital",
    category: "storage",
    specs: [
      { name: "Capacity", value: "2TB" },
      { name: "Type", value: "NVMe SSD" },
      { name: "Read Speed", value: "7000 MB/s" },
      { name: "Write Speed", value: "5300 MB/s" },
      { name: "Form Factor", value: "M.2 2280" },
    ],
    price: 249.99,
  },
  {
    id: "storage-4",
    name: "MX500 1TB",
    brand: "Crucial",
    category: "storage",
    specs: [
      { name: "Capacity", value: "1TB" },
      { name: "Type", value: "SATA SSD" },
      { name: "Read Speed", value: "560 MB/s" },
      { name: "Write Speed", value: "510 MB/s" },
      { name: "Form Factor", value: '2.5"' },
    ],
    price: 89.99,
  },

  // PSUs
  {
    id: "psu-1",
    name: "RM750x",
    brand: "Corsair",
    category: "psu",
    specs: [
      { name: "Wattage", value: "750W" },
      { name: "Efficiency", value: "80+ Gold" },
      { name: "Modularity", value: "Fully Modular" },
      { name: "Fan Size", value: "135mm" },
      { name: "ATX Version", value: "2.4" },
    ],
    price: 129.99,
  },
  {
    id: "psu-2",
    name: "SuperNOVA 850 G5",
    brand: "EVGA",
    category: "psu",
    specs: [
      { name: "Wattage", value: "850W" },
      { name: "Efficiency", value: "80+ Gold" },
      { name: "Modularity", value: "Fully Modular" },
      { name: "Fan Size", value: "135mm" },
      { name: "ATX Version", value: "2.4" },
    ],
    price: 149.99,
  },
  {
    id: "psu-3",
    name: "Focus GX-650",
    brand: "Seasonic",
    category: "psu",
    specs: [
      { name: "Wattage", value: "650W" },
      { name: "Efficiency", value: "80+ Gold" },
      { name: "Modularity", value: "Fully Modular" },
      { name: "Fan Size", value: "120mm" },
      { name: "ATX Version", value: "2.4" },
    ],
    price: 109.99,
  },
  {
    id: "psu-4",
    name: "Toughpower GF1 750W",
    brand: "Thermaltake",
    category: "psu",
    specs: [
      { name: "Wattage", value: "750W" },
      { name: "Efficiency", value: "80+ Gold" },
      { name: "Modularity", value: "Fully Modular" },
      { name: "Fan Size", value: "140mm" },
      { name: "ATX Version", value: "2.4" },
    ],
    price: 119.99,
  },

  // Cases
  {
    id: "case-1",
    name: "4000D Airflow",
    brand: "Corsair",
    category: "case",
    specs: [
      { name: "Form Factor", value: "Mid Tower" },
      { name: "Motherboard Support", value: "ATX, mATX, Mini-ITX" },
      { name: "Drive Bays", value: '2x 3.5", 2x 2.5"' },
      { name: "Front I/O", value: "1x USB 3.1 Type-C, 1x USB 3.0, Audio" },
      { name: "Dimensions", value: "453 x 230 x 466 mm" },
    ],
    price: 94.99,
  },
  {
    id: "case-2",
    name: "H510",
    brand: "NZXT",
    category: "case",
    specs: [
      { name: "Form Factor", value: "Mid Tower" },
      { name: "Motherboard Support", value: "ATX, mATX, Mini-ITX" },
      { name: "Drive Bays", value: '3x 3.5", 2x 2.5"' },
      { name: "Front I/O", value: "1x USB 3.1 Type-C, 1x USB 3.0, Audio" },
      { name: "Dimensions", value: "428 x 210 x 460 mm" },
    ],
    price: 69.99,
  },
  {
    id: "case-3",
    name: "Meshify C",
    brand: "Fractal Design",
    category: "case",
    specs: [
      { name: "Form Factor", value: "Mid Tower" },
      { name: "Motherboard Support", value: "ATX, mATX, Mini-ITX" },
      { name: "Drive Bays", value: '2x 3.5", 3x 2.5"' },
      { name: "Front I/O", value: "2x USB 3.0, Audio" },
      { name: "Dimensions", value: "413 x 217 x 453 mm" },
    ],
    price: 89.99,
  },
  {
    id: "case-4",
    name: "Lancool II Mesh",
    brand: "Lian Li",
    category: "case",
    specs: [
      { name: "Form Factor", value: "Mid Tower" },
      { name: "Motherboard Support", value: "E-ATX, ATX, mATX, Mini-ITX" },
      { name: "Drive Bays", value: '3x 3.5", 4x 2.5"' },
      { name: "Front I/O", value: "2x USB 3.0, 1x USB 3.1 Type-C, Audio" },
      { name: "Dimensions", value: "478 x 229 x 494 mm" },
    ],
    price: 109.99,
  },
]

// Mock data for price comparisons
export const getPriceComparisons = (componentId: string) => {
  return [
    {
      retailer: "Amazon",
      price: Math.round((getComponentPrice(componentId) - 5 + Math.random() * 10) * 100) / 100,
      url: "https://amazon.com",
    },
    {
      retailer: "Newegg",
      price: Math.round((getComponentPrice(componentId) + Math.random() * 15) * 100) / 100,
      url: "https://newegg.com",
    },
    {
      retailer: "Best Buy",
      price: Math.round((getComponentPrice(componentId) + 10 - Math.random() * 10) * 100) / 100,
      url: "https://bestbuy.com",
    },
    {
      retailer: "Micro Center",
      price: Math.round((getComponentPrice(componentId) - 10 + Math.random() * 20) * 100) / 100,
      url: "https://microcenter.com",
    },
  ]
}

// Helper function to get component price
const getComponentPrice = (componentId: string) => {
  const component = mockComponents.find((c) => c.id === componentId)
  return component ? component.price : 100
}

// Mock data for build guides
export const mockBuildGuides = [
  {
    id: "guide-1",
    title: "Budget Gaming PC Build",
    description: "A budget-friendly gaming PC build that can handle most modern games at 1080p.",
    difficulty: "Beginner",
    estimatedTime: "2-3 hours",
    components: ["cpu-3", "mb-3", "ram-2", "gpu-4", "storage-4", "psu-3", "case-2"],
    author: "PCBuildPro",
    date: "2023-05-15",
    likes: 245,
    views: 12500,
  },
  {
    id: "guide-2",
    title: "High-End Gaming PC Build",
    description: "A high-end gaming PC build that can handle 4K gaming and content creation.",
    difficulty: "Intermediate",
    estimatedTime: "3-4 hours",
    components: ["cpu-2", "mb-2", "ram-1", "gpu-3", "storage-3", "psu-2", "case-4"],
    author: "TechGuru",
    date: "2023-06-22",
    likes: 378,
    views: 18900,
  },
  {
    id: "guide-3",
    title: "Compact Mini-ITX Build",
    description: "A compact Mini-ITX build that's perfect for small spaces.",
    difficulty: "Advanced",
    estimatedTime: "4-5 hours",
    components: ["cpu-1", "mb-1", "ram-3", "gpu-1", "storage-1", "psu-1", "case-1"],
    author: "SFFMaster",
    date: "2023-07-10",
    likes: 156,
    views: 8700,
  },
  {
    id: "guide-4",
    title: "Workstation Build for Content Creation",
    description: "A powerful workstation build for video editing, 3D rendering, and other content creation tasks.",
    difficulty: "Intermediate",
    estimatedTime: "3-4 hours",
    components: ["cpu-1", "mb-1", "ram-4", "gpu-2", "storage-3", "psu-2", "case-3"],
    author: "CreatorPro",
    date: "2023-08-05",
    likes: 210,
    views: 11200,
  },
]

// Mock data for user-submitted builds
export const mockUserBuilds = [
  {
    id: "build-1",
    title: "My First Gaming PC",
    description: "My first gaming PC build. It's not much, but it's mine!",
    components: ["cpu-3", "mb-3", "ram-2", "gpu-4", "storage-4", "psu-3", "case-2"],
    author: "GamerNewbie",
    date: "2023-06-10",
    likes: 45,
    comments: 12,
    images: ["/placeholder.svg?height=400&width=600"],
  },
  {
    id: "build-2",
    title: "Dream 4K Gaming Rig",
    description: "Finally built my dream 4K gaming rig. It's a beast!",
    components: ["cpu-2", "mb-2", "ram-1", "gpu-3", "storage-3", "psu-2", "case-4"],
    author: "4KGamer",
    date: "2023-07-15",
    likes: 87,
    comments: 24,
    images: ["/placeholder.svg?height=400&width=600", "/placeholder.svg?height=400&width=600"],
  },
  {
    id: "build-3",
    title: "Compact Powerhouse",
    description: "A small form factor build that packs a punch.",
    components: ["cpu-1", "mb-1", "ram-3", "gpu-1", "storage-1", "psu-1", "case-1"],
    author: "SFFEnthusiast",
    date: "2023-08-20",
    likes: 62,
    comments: 18,
    images: ["/placeholder.svg?height=400&width=600"],
  },
  {
    id: "build-4",
    title: "Budget Streaming Setup",
    description: "A budget-friendly PC build for streaming and light gaming.",
    components: ["cpu-3", "mb-4", "ram-2", "gpu-4", "storage-2", "psu-3", "case-2"],
    author: "StreamerOnABudget",
    date: "2023-09-05",
    likes: 34,
    comments: 9,
    images: ["/placeholder.svg?height=400&width=600"],
  },
]

// Mock data for shipping estimates
export const getShippingEstimates = (componentId: string) => {
  return [
    {
      retailer: "Amazon",
      days: Math.floor(Math.random() * 3) + 1,
      price: Math.random() > 0.5 ? 0 : 4.99,
    },
    {
      retailer: "Newegg",
      days: Math.floor(Math.random() * 4) + 2,
      price: Math.random() > 0.3 ? 0 : 5.99,
    },
    {
      retailer: "Best Buy",
      days: Math.floor(Math.random() * 3) + 1,
      price: Math.random() > 0.7 ? 0 : 3.99,
    },
    {
      retailer: "Micro Center",
      days: Math.floor(Math.random() * 5) + 3,
      price: 7.99,
    },
  ]
}


===== ./lib/share-build.ts =====
import type { Component } from "@/lib/types"

export async function copyShareableLink(build: {
  name: string
  date: string
  components: Component[]
}): Promise<boolean> {
  try {
    // Convert build data to a compressed string
    const buildData = {
      n: build.name,
      d: build.date,
      c: build.components.map(c => ({
        i: c.id,
        n: c.name,
        b: c.brand,
        p: c.price,
        t: c.category
      }))
    }

    // Compress the data
    const compressedData = btoa(JSON.stringify(buildData))
    
    // Generate the shareable URL
    const baseUrl = window.location.origin
    const shareUrl = `${baseUrl}/share?build=${compressedData}`

    // Copy to clipboard
    await navigator.clipboard.writeText(shareUrl)
    return true
  } catch (error) {
    console.error("Failed to generate shareable link:", error)
    return false
  }
}

export function parseSharedBuild(compressedData: string): {
  name: string
  date: string
  components: Component[]
} | null {
  try {
    // Decompress the data
    const buildData = JSON.parse(atob(compressedData))
    
    // Reconstruct the build object
    return {
      name: buildData.n,
      date: buildData.d,
      components: buildData.c.map((c: any) => ({
        id: c.i,
        name: c.n,
        brand: c.b,
        price: c.p,
        category: c.t
      }))
    }
  } catch (error) {
    console.error("Failed to parse shared build:", error)
    return null
  }
} 

===== ./lib/export-pdf.ts =====
import { jsPDF } from "jspdf"
import type { Component } from "@/lib/types"
import { checkCompatibility } from "@/lib/compatibility"

export function exportBuildToPDF(build: {
  name: string
  date: string
  components: Component[]
}) {
  const doc = new jsPDF()
  const compatibilityIssues = checkCompatibility(build.components)
  const totalPrice = build.components.reduce((sum, component) => sum + component.price, 0)

  // Set font
  doc.setFont("helvetica", "bold")
  doc.setFontSize(24)
  doc.text(build.name, 20, 20)

  // Subtitle
  doc.setFont("helvetica", "normal")
  doc.setFontSize(12)
  doc.text(`Generated on ${new Date(build.date).toLocaleDateString()}`, 20, 30)

  // Components section
  doc.setFont("helvetica", "bold")
  doc.setFontSize(16)
  doc.text("Components", 20, 50)

  // Component list
  doc.setFont("helvetica", "normal")
  doc.setFontSize(12)
  let y = 60
  build.components.forEach((component) => {
    doc.text(`${component.brand} ${component.name}`, 20, y)
    doc.text(`$${component.price.toFixed(2)}`, 180, y, { align: "right" })
    y += 10
  })

  // Total
  doc.setFont("helvetica", "bold")
  doc.text("Total", 20, y + 10)
  doc.text(`$${totalPrice.toFixed(2)}`, 180, y + 10, { align: "right" })

  // Compatibility warnings
  if (compatibilityIssues.length > 0) {
    y += 30
    doc.setFont("helvetica", "bold")
    doc.setFontSize(14)
    doc.text("Compatibility Warnings", 20, y)

    doc.setFont("helvetica", "normal")
    doc.setFontSize(12)
    compatibilityIssues.forEach((issue) => {
      y += 10
      doc.text(issue, 20, y)
    })
  }

  // Footer
  const pageHeight = doc.internal.pageSize.height
  doc.setFont("helvetica", "normal")
  doc.setFontSize(10)
  doc.text(
    `Generated by PC Part Visualizer • ${new Date().toLocaleDateString()}`,
    105,
    pageHeight - 20,
    { align: "center" }
  )

  // Save the PDF
  doc.save(`${build.name.replace(/\s+/g, "-").toLowerCase()}.pdf`)
} 

===== ./lib/price-comparison.ts =====
import type { RetailerPrice } from "./types"

// Mock function to simulate fetching price comparisons from different retailers
export function getPriceComparisons(componentId: string): RetailerPrice[] {
  // In a real app, this would fetch from an API
  // For now, we'll generate some random prices

  const basePrice = getBasePrice(componentId)

  if (!basePrice) return []

  // Generate random prices for different retailers
  return [
    {
      retailer: "Amazon",
      price: Math.round(basePrice * (0.95 + Math.random() * 0.15) * 100) / 100,
      url: "#",
    },
    {
      retailer: "Newegg",
      price: Math.round(basePrice * (0.93 + Math.random() * 0.12) * 100) / 100,
      url: "#",
    },
    {
      retailer: "Best Buy",
      price: Math.round(basePrice * (0.97 + Math.random() * 0.18) * 100) / 100,
      url: "#",
    },
    {
      retailer: "Micro Center",
      price: Math.round(basePrice * (0.92 + Math.random() * 0.1) * 100) / 100,
      url: "#",
    },
  ]
}

// Helper function to get base price for a component
function getBasePrice(componentId: string): number | null {
  // This would normally look up the price from the database
  // For now, we'll use a simple mapping
  const priceMap: Record<string, number> = {
    "cpu-1": 299.99,
    "cpu-2": 379.99,
    "cpu-3": 199.99,
    "cpu-4": 279.99,
    "mb-1": 169.99,
    "mb-2": 249.99,
    "mb-3": 159.99,
    "mb-4": 149.99,
    "ram-1": 129.99,
    "ram-2": 89.99,
    "ram-3": 169.99,
    "ram-4": 219.99,
    "gpu-1": 599.99,
    "gpu-2": 649.99,
    "gpu-3": 699.99,
    "gpu-4": 479.99,
    "storage-1": 119.99,
    "storage-2": 54.99,
    "storage-3": 249.99,
    "storage-4": 89.99,
    "psu-1": 129.99,
    "psu-2": 149.99,
    "psu-3": 109.99,
    "psu-4": 119.99,
    "case-1": 94.99,
    "case-2": 69.99,
    "case-3": 89.99,
    "case-4": 109.99,
  }

  return priceMap[componentId] || null
}


===== ./components.json =====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

===== ./tailwind.config.ts =====
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;


===== ./hooks/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


===== ./hooks/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


===== ./tsconfig.json =====
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


===== ./package.json =====
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@react-pdf/renderer": "^4.3.0",
    "@react-three/drei": "^10.0.6",
    "@react-three/fiber": "^9.1.2",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "expo": "latest",
    "expo-asset": "latest",
    "expo-file-system": "latest",
    "expo-gl": "latest",
    "immer": "latest",
    "input-otp": "1.4.1",
    "jspdf": "^3.0.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.6",
    "react": "^19",
    "react-colorful": "^5.6.1",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-native": "latest",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "three": "latest",
    "use-sync-external-store": "latest",
    "vaul": "^0.9.6",
    "zod": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/three": "^0.175.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

===== ./next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


