generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           Int          @id @default(autoincrement())
  name         String?
  email        String       @unique
  passwordHash String?
  image        String?
  createdAt    DateTime     @default(now())
  accounts     Account[]
  BuildGuide   BuildGuide[]
  Comment      Comment[]
  Review       Review[]
  sessions     Session[]
  UserBuild    UserBuild[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Component {
  id                  String                @id @default(cuid())
  name                String
  brand               String
  category            String
  price               Float
  @@unique([name, brand, category, price], name: "name_brand_category_price")
  BuildGuideComponent BuildGuideComponent[]
  Comment             Comment[]
  ComponentSpec       ComponentSpec[]
  reviews             Review[]
  UserBuildComponent  UserBuildComponent[]
}

model Review {
  id          Int       @id @default(autoincrement())
  content     String
  rating      Int?
  authorId    Int?
  componentId String
  createdAt   DateTime  @default(now())
  User        User?     @relation(fields: [authorId], references: [id])
  component   Component @relation(fields: [componentId], references: [id])
}

model Comment {
  id           Int         @id @default(autoincrement())
  content      String
  authorId     Int
  componentId  String?
  buildGuideId String?
  userBuildId  String?
  createdAt    DateTime    @default(now())
  User         User        @relation(fields: [authorId], references: [id])
  BuildGuide   BuildGuide? @relation(fields: [buildGuideId], references: [id])
  Component    Component?  @relation(fields: [componentId], references: [id])
  UserBuild    UserBuild?  @relation(fields: [userBuildId], references: [id])
}

model BuildGuide {
  id                  String                @id
  title               String
  description         String
  difficulty          String
  estimatedTime       String
  authorId            Int
  date                DateTime
  likes               Int                   @default(0)
  views               Int                   @default(0)
  User                User                  @relation(fields: [authorId], references: [id])
  BuildGuideComponent BuildGuideComponent[]
  BuildGuideImage     BuildGuideImage[]
  Comment             Comment[]
}

model BuildGuideComponent {
  id           Int        @id @default(autoincrement())
  buildGuideId String
  componentId  String
  BuildGuide   BuildGuide @relation(fields: [buildGuideId], references: [id])
  Component    Component  @relation(fields: [componentId], references: [id])
}

model BuildGuideImage {
  id           Int        @id @default(autoincrement())
  buildGuideId String
  url          String
  BuildGuide   BuildGuide @relation(fields: [buildGuideId], references: [id])
}

model ComponentSpec {
  id          Int       @id @default(autoincrement())
  componentId String
  name        String
  value       String
  Component   Component @relation(fields: [componentId], references: [id])

  @@unique([componentId, name], name: "component_spec_unique")
}

model UserBuild {
  id                 String               @id @default(uuid())
  title              String
  description        String
  authorId           Int?
  date               DateTime
  likes              Int                  @default(0)
  commentsCount      Int                  @default(0)
  shared             Boolean              @default(false)
  Comment            Comment[]
  User               User?                @relation(fields: [authorId], references: [id])
  UserBuildComponent UserBuildComponent[]
  UserBuildImage     UserBuildImage[]
}

model UserBuildComponent {
  id          Int       @id @default(autoincrement())
  userBuildId String
  componentId String
  Component   Component @relation(fields: [componentId], references: [id])
  UserBuild   UserBuild @relation(fields: [userBuildId], references: [id])
}

model UserBuildImage {
  id          Int       @id @default(autoincrement())
  userBuildId String    @unique
  url         String
  UserBuild   UserBuild @relation(fields: [userBuildId], references: [id])
}
